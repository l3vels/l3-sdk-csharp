/*
 * L3vels Api
 *
 * L3vels API for Game developers
 *
 * The version of the OpenAPI document: 0.3
 * Contact: support@l3vels.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using L3vels.Sdk.Client;
using L3vels.Sdk.Api;
// uncomment below to import models
//using L3vels.Sdk.Model;

namespace L3vels.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing TransactionApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TransactionApiTests : IDisposable
    {
        private TransactionApi instance;

        public TransactionApiTests()
        {
            instance = new TransactionApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TransactionApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TransactionApi
            //Assert.IsType<TransactionApi>(instance);
        }

        /// <summary>
        /// Test TransactionControllerTransactionById
        /// </summary>
        [Fact]
        public void TransactionControllerTransactionByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string id = null;
            //string projectId = null;
            //var response = instance.TransactionControllerTransactionById(authorization, id, projectId);
            //Assert.IsType<Transaction>(response);
        }

        /// <summary>
        /// Test TransactionControllerTransactions
        /// </summary>
        [Fact]
        public void TransactionControllerTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string projectId = null;
            //string collectionId = null;
            //string playerId = null;
            //string sort = null;
            //string order = null;
            //string searchText = null;
            //decimal? limit = null;
            //decimal? page = null;
            //var response = instance.TransactionControllerTransactions(authorization, projectId, collectionId, playerId, sort, order, searchText, limit, page);
            //Assert.IsType<Transaction>(response);
        }

        /// <summary>
        /// Test TransactionControllerWebhook
        /// </summary>
        [Fact]
        public void TransactionControllerWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //instance.TransactionControllerWebhook(authorization);
        }
    }
}
