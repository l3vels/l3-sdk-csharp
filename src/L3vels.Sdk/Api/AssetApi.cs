/*
 * L3vels Api
 *
 * L3vels API for Game developers
 *
 * The version of the OpenAPI document: 0.3
 * Contact: support@l3vels.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using L3vels.Sdk.Client;
using L3vels.Sdk.Model;

namespace L3vels.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Count assets
        /// </summary>
        /// <remarks>
        /// Counts total assets in game.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>decimal</returns>
        decimal CountByGame(string authorization, string gameId, int operationIndex = 0);

        /// <summary>
        /// Count assets
        /// </summary>
        /// <remarks>
        /// Counts total assets in game.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of decimal</returns>
        ApiResponse<decimal> CountByGameWithHttpInfo(string authorization, string gameId, int operationIndex = 0);
        /// <summary>
        /// Retrieve asset by ID
        /// </summary>
        /// <remarks>
        /// Retrieve asset by ID in specific Game. Example: Find asset AK-47 in game Call of Duty
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="id">Asset ID to find</param>
        /// <param name="gameId">Game ID to find asset in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Asset</returns>
        Asset GetAssetById(string authorization, string id, string gameId, int operationIndex = 0);

        /// <summary>
        /// Retrieve asset by ID
        /// </summary>
        /// <remarks>
        /// Retrieve asset by ID in specific Game. Example: Find asset AK-47 in game Call of Duty
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="id">Asset ID to find</param>
        /// <param name="gameId">Game ID to find asset in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Asset</returns>
        ApiResponse<Asset> GetAssetByIdWithHttpInfo(string authorization, string id, string gameId, int operationIndex = 0);
        /// <summary>
        /// Retrieve assets
        /// </summary>
        /// <remarks>
        /// This API method retrieves a list of assets that match the specified filter criteria. Developers can use this method to retrieve assets by name, description or other properties
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID to find assets in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="collectionId">Filter assets by collection. Example: Get assets only from Weapons collection. (optional)</param>
        /// <param name="sort">Asset field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search assets by name (optional)</param>
        /// <param name="limit">Number of assets to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssetsResponse</returns>
        AssetsResponse GetAssets(string authorization, string gameId, string collectionId = default(string), string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// Retrieve assets
        /// </summary>
        /// <remarks>
        /// This API method retrieves a list of assets that match the specified filter criteria. Developers can use this method to retrieve assets by name, description or other properties
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID to find assets in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="collectionId">Filter assets by collection. Example: Get assets only from Weapons collection. (optional)</param>
        /// <param name="sort">Asset field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search assets by name (optional)</param>
        /// <param name="limit">Number of assets to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssetsResponse</returns>
        ApiResponse<AssetsResponse> GetAssetsWithHttpInfo(string authorization, string gameId, string collectionId = default(string), string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// Update asset
        /// </summary>
        /// <remarks>
        /// Update asset by ID in specific collection. Example: Update asset AK-47 in collection Weapons
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="id">Asset ID to update</param>
        /// <param name="updateAssetInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Asset</returns>
        Asset UpdateAsset(string authorization, string id, UpdateAssetInput updateAssetInput, int operationIndex = 0);

        /// <summary>
        /// Update asset
        /// </summary>
        /// <remarks>
        /// Update asset by ID in specific collection. Example: Update asset AK-47 in collection Weapons
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="id">Asset ID to update</param>
        /// <param name="updateAssetInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Asset</returns>
        ApiResponse<Asset> UpdateAssetWithHttpInfo(string authorization, string id, UpdateAssetInput updateAssetInput, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Count assets
        /// </summary>
        /// <remarks>
        /// Counts total assets in game.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of decimal</returns>
        System.Threading.Tasks.Task<decimal> CountByGameAsync(string authorization, string gameId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Count assets
        /// </summary>
        /// <remarks>
        /// Counts total assets in game.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (decimal)</returns>
        System.Threading.Tasks.Task<ApiResponse<decimal>> CountByGameWithHttpInfoAsync(string authorization, string gameId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve asset by ID
        /// </summary>
        /// <remarks>
        /// Retrieve asset by ID in specific Game. Example: Find asset AK-47 in game Call of Duty
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="id">Asset ID to find</param>
        /// <param name="gameId">Game ID to find asset in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Asset</returns>
        System.Threading.Tasks.Task<Asset> GetAssetByIdAsync(string authorization, string id, string gameId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve asset by ID
        /// </summary>
        /// <remarks>
        /// Retrieve asset by ID in specific Game. Example: Find asset AK-47 in game Call of Duty
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="id">Asset ID to find</param>
        /// <param name="gameId">Game ID to find asset in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Asset>> GetAssetByIdWithHttpInfoAsync(string authorization, string id, string gameId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve assets
        /// </summary>
        /// <remarks>
        /// This API method retrieves a list of assets that match the specified filter criteria. Developers can use this method to retrieve assets by name, description or other properties
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID to find assets in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="collectionId">Filter assets by collection. Example: Get assets only from Weapons collection. (optional)</param>
        /// <param name="sort">Asset field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search assets by name (optional)</param>
        /// <param name="limit">Number of assets to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetsResponse</returns>
        System.Threading.Tasks.Task<AssetsResponse> GetAssetsAsync(string authorization, string gameId, string collectionId = default(string), string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve assets
        /// </summary>
        /// <remarks>
        /// This API method retrieves a list of assets that match the specified filter criteria. Developers can use this method to retrieve assets by name, description or other properties
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID to find assets in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="collectionId">Filter assets by collection. Example: Get assets only from Weapons collection. (optional)</param>
        /// <param name="sort">Asset field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search assets by name (optional)</param>
        /// <param name="limit">Number of assets to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetsResponse>> GetAssetsWithHttpInfoAsync(string authorization, string gameId, string collectionId = default(string), string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update asset
        /// </summary>
        /// <remarks>
        /// Update asset by ID in specific collection. Example: Update asset AK-47 in collection Weapons
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="id">Asset ID to update</param>
        /// <param name="updateAssetInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Asset</returns>
        System.Threading.Tasks.Task<Asset> UpdateAssetAsync(string authorization, string id, UpdateAssetInput updateAssetInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update asset
        /// </summary>
        /// <remarks>
        /// Update asset by ID in specific collection. Example: Update asset AK-47 in collection Weapons
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="id">Asset ID to update</param>
        /// <param name="updateAssetInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Asset>> UpdateAssetWithHttpInfoAsync(string authorization, string id, UpdateAssetInput updateAssetInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetApi : IAssetApiSync, IAssetApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AssetApi : IAssetApi
    {
        private L3vels.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetApi(string basePath)
        {
            this.Configuration = L3vels.Sdk.Client.Configuration.MergeConfigurations(
                L3vels.Sdk.Client.GlobalConfiguration.Instance,
                new L3vels.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new L3vels.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new L3vels.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = L3vels.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssetApi(L3vels.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = L3vels.Sdk.Client.Configuration.MergeConfigurations(
                L3vels.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new L3vels.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new L3vels.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = L3vels.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AssetApi(L3vels.Sdk.Client.ISynchronousClient client, L3vels.Sdk.Client.IAsynchronousClient asyncClient, L3vels.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = L3vels.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public L3vels.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public L3vels.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public L3vels.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public L3vels.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Count assets Counts total assets in game.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>decimal</returns>
        public decimal CountByGame(string authorization, string gameId, int operationIndex = 0)
        {
            L3vels.Sdk.Client.ApiResponse<decimal> localVarResponse = CountByGameWithHttpInfo(authorization, gameId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Count assets Counts total assets in game.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of decimal</returns>
        public L3vels.Sdk.Client.ApiResponse<decimal> CountByGameWithHttpInfo(string authorization, string gameId, int operationIndex = 0)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling AssetApi->CountByGame");
            }

            // verify the required parameter 'gameId' is set
            if (gameId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'gameId' when calling AssetApi->CountByGame");
            }

            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("game_id", L3vels.Sdk.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "AssetApi.CountByGame";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<decimal>("/v1/asset/count/{game_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountByGame", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Count assets Counts total assets in game.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of decimal</returns>
        public async System.Threading.Tasks.Task<decimal> CountByGameAsync(string authorization, string gameId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            L3vels.Sdk.Client.ApiResponse<decimal> localVarResponse = await CountByGameWithHttpInfoAsync(authorization, gameId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Count assets Counts total assets in game.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (decimal)</returns>
        public async System.Threading.Tasks.Task<L3vels.Sdk.Client.ApiResponse<decimal>> CountByGameWithHttpInfoAsync(string authorization, string gameId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling AssetApi->CountByGame");
            }

            // verify the required parameter 'gameId' is set
            if (gameId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'gameId' when calling AssetApi->CountByGame");
            }


            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("game_id", L3vels.Sdk.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "AssetApi.CountByGame";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<decimal>("/v1/asset/count/{game_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountByGame", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve asset by ID Retrieve asset by ID in specific Game. Example: Find asset AK-47 in game Call of Duty
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="id">Asset ID to find</param>
        /// <param name="gameId">Game ID to find asset in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Asset</returns>
        public Asset GetAssetById(string authorization, string id, string gameId, int operationIndex = 0)
        {
            L3vels.Sdk.Client.ApiResponse<Asset> localVarResponse = GetAssetByIdWithHttpInfo(authorization, id, gameId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve asset by ID Retrieve asset by ID in specific Game. Example: Find asset AK-47 in game Call of Duty
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="id">Asset ID to find</param>
        /// <param name="gameId">Game ID to find asset in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Asset</returns>
        public L3vels.Sdk.Client.ApiResponse<Asset> GetAssetByIdWithHttpInfo(string authorization, string id, string gameId, int operationIndex = 0)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling AssetApi->GetAssetById");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling AssetApi->GetAssetById");
            }

            // verify the required parameter 'gameId' is set
            if (gameId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'gameId' when calling AssetApi->GetAssetById");
            }

            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", L3vels.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("game_id", L3vels.Sdk.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "AssetApi.GetAssetById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Asset>("/v1/asset/{game_id}/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve asset by ID Retrieve asset by ID in specific Game. Example: Find asset AK-47 in game Call of Duty
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="id">Asset ID to find</param>
        /// <param name="gameId">Game ID to find asset in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Asset</returns>
        public async System.Threading.Tasks.Task<Asset> GetAssetByIdAsync(string authorization, string id, string gameId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            L3vels.Sdk.Client.ApiResponse<Asset> localVarResponse = await GetAssetByIdWithHttpInfoAsync(authorization, id, gameId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve asset by ID Retrieve asset by ID in specific Game. Example: Find asset AK-47 in game Call of Duty
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="id">Asset ID to find</param>
        /// <param name="gameId">Game ID to find asset in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        public async System.Threading.Tasks.Task<L3vels.Sdk.Client.ApiResponse<Asset>> GetAssetByIdWithHttpInfoAsync(string authorization, string id, string gameId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling AssetApi->GetAssetById");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling AssetApi->GetAssetById");
            }

            // verify the required parameter 'gameId' is set
            if (gameId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'gameId' when calling AssetApi->GetAssetById");
            }


            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", L3vels.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("game_id", L3vels.Sdk.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "AssetApi.GetAssetById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Asset>("/v1/asset/{game_id}/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve assets This API method retrieves a list of assets that match the specified filter criteria. Developers can use this method to retrieve assets by name, description or other properties
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID to find assets in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="collectionId">Filter assets by collection. Example: Get assets only from Weapons collection. (optional)</param>
        /// <param name="sort">Asset field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search assets by name (optional)</param>
        /// <param name="limit">Number of assets to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssetsResponse</returns>
        public AssetsResponse GetAssets(string authorization, string gameId, string collectionId = default(string), string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0)
        {
            L3vels.Sdk.Client.ApiResponse<AssetsResponse> localVarResponse = GetAssetsWithHttpInfo(authorization, gameId, collectionId, sort, order, searchText, limit, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve assets This API method retrieves a list of assets that match the specified filter criteria. Developers can use this method to retrieve assets by name, description or other properties
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID to find assets in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="collectionId">Filter assets by collection. Example: Get assets only from Weapons collection. (optional)</param>
        /// <param name="sort">Asset field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search assets by name (optional)</param>
        /// <param name="limit">Number of assets to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssetsResponse</returns>
        public L3vels.Sdk.Client.ApiResponse<AssetsResponse> GetAssetsWithHttpInfo(string authorization, string gameId, string collectionId = default(string), string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling AssetApi->GetAssets");
            }

            // verify the required parameter 'gameId' is set
            if (gameId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'gameId' when calling AssetApi->GetAssets");
            }

            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "game_id", gameId));
            if (collectionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "collection_id", collectionId));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "search_text", searchText));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "AssetApi.GetAssets";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<AssetsResponse>("/v1/asset", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve assets This API method retrieves a list of assets that match the specified filter criteria. Developers can use this method to retrieve assets by name, description or other properties
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID to find assets in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="collectionId">Filter assets by collection. Example: Get assets only from Weapons collection. (optional)</param>
        /// <param name="sort">Asset field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search assets by name (optional)</param>
        /// <param name="limit">Number of assets to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetsResponse</returns>
        public async System.Threading.Tasks.Task<AssetsResponse> GetAssetsAsync(string authorization, string gameId, string collectionId = default(string), string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            L3vels.Sdk.Client.ApiResponse<AssetsResponse> localVarResponse = await GetAssetsWithHttpInfoAsync(authorization, gameId, collectionId, sort, order, searchText, limit, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve assets This API method retrieves a list of assets that match the specified filter criteria. Developers can use this method to retrieve assets by name, description or other properties
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID to find assets in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="collectionId">Filter assets by collection. Example: Get assets only from Weapons collection. (optional)</param>
        /// <param name="sort">Asset field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search assets by name (optional)</param>
        /// <param name="limit">Number of assets to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetsResponse)</returns>
        public async System.Threading.Tasks.Task<L3vels.Sdk.Client.ApiResponse<AssetsResponse>> GetAssetsWithHttpInfoAsync(string authorization, string gameId, string collectionId = default(string), string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling AssetApi->GetAssets");
            }

            // verify the required parameter 'gameId' is set
            if (gameId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'gameId' when calling AssetApi->GetAssets");
            }


            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "game_id", gameId));
            if (collectionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "collection_id", collectionId));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "search_text", searchText));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "AssetApi.GetAssets";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AssetsResponse>("/v1/asset", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update asset Update asset by ID in specific collection. Example: Update asset AK-47 in collection Weapons
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="id">Asset ID to update</param>
        /// <param name="updateAssetInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Asset</returns>
        public Asset UpdateAsset(string authorization, string id, UpdateAssetInput updateAssetInput, int operationIndex = 0)
        {
            L3vels.Sdk.Client.ApiResponse<Asset> localVarResponse = UpdateAssetWithHttpInfo(authorization, id, updateAssetInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update asset Update asset by ID in specific collection. Example: Update asset AK-47 in collection Weapons
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="id">Asset ID to update</param>
        /// <param name="updateAssetInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Asset</returns>
        public L3vels.Sdk.Client.ApiResponse<Asset> UpdateAssetWithHttpInfo(string authorization, string id, UpdateAssetInput updateAssetInput, int operationIndex = 0)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling AssetApi->UpdateAsset");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling AssetApi->UpdateAsset");
            }

            // verify the required parameter 'updateAssetInput' is set
            if (updateAssetInput == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'updateAssetInput' when calling AssetApi->UpdateAsset");
            }

            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", L3vels.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = updateAssetInput;

            localVarRequestOptions.Operation = "AssetApi.UpdateAsset";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Asset>("/v1/asset/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update asset Update asset by ID in specific collection. Example: Update asset AK-47 in collection Weapons
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="id">Asset ID to update</param>
        /// <param name="updateAssetInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Asset</returns>
        public async System.Threading.Tasks.Task<Asset> UpdateAssetAsync(string authorization, string id, UpdateAssetInput updateAssetInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            L3vels.Sdk.Client.ApiResponse<Asset> localVarResponse = await UpdateAssetWithHttpInfoAsync(authorization, id, updateAssetInput, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update asset Update asset by ID in specific collection. Example: Update asset AK-47 in collection Weapons
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="id">Asset ID to update</param>
        /// <param name="updateAssetInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        public async System.Threading.Tasks.Task<L3vels.Sdk.Client.ApiResponse<Asset>> UpdateAssetWithHttpInfoAsync(string authorization, string id, UpdateAssetInput updateAssetInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling AssetApi->UpdateAsset");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling AssetApi->UpdateAsset");
            }

            // verify the required parameter 'updateAssetInput' is set
            if (updateAssetInput == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'updateAssetInput' when calling AssetApi->UpdateAsset");
            }


            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", L3vels.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = updateAssetInput;

            localVarRequestOptions.Operation = "AssetApi.UpdateAsset";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Asset>("/v1/asset/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
