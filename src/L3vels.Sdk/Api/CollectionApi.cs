/*
 * L3vels Api
 *
 * L3vels API for Game developers
 *
 * The version of the OpenAPI document: 0.3
 * Contact: support@l3vels.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using L3vels.Sdk.Client;

namespace L3vels.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve collection by ID
        /// </summary>
        /// <remarks>
        /// This API method retrieves a specific collection based on the unique identifier provided in the request.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="id">Collection ID to find</param>
        /// <param name="projectId">Game/project ID to find collection in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Collection</returns>
        Collection CollectionControllerCollectionById(string authorization, string id, string projectId, int operationIndex = 0);

        /// <summary>
        /// Retrieve collection by ID
        /// </summary>
        /// <remarks>
        /// This API method retrieves a specific collection based on the unique identifier provided in the request.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="id">Collection ID to find</param>
        /// <param name="projectId">Game/project ID to find collection in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Collection</returns>
        ApiResponse<Collection> CollectionControllerCollectionByIdWithHttpInfo(string authorization, string id, string projectId, int operationIndex = 0);
        /// <summary>
        /// Retrieve collections
        /// </summary>
        /// <remarks>
        /// This API method retrieves a list of collections that match the specified filter criteria. Developers can use this method to retrieve collections by name, category, status, or other properties.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to find collections in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="sort">Collection field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search collections by name (optional)</param>
        /// <param name="limit">Number of collections to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Collection&gt;</returns>
        List<Collection> CollectionControllerCollections(string authorization, string projectId, string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// Retrieve collections
        /// </summary>
        /// <remarks>
        /// This API method retrieves a list of collections that match the specified filter criteria. Developers can use this method to retrieve collections by name, category, status, or other properties.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to find collections in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="sort">Collection field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search collections by name (optional)</param>
        /// <param name="limit">Number of collections to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Collection&gt;</returns>
        ApiResponse<List<Collection>> CollectionControllerCollectionsWithHttpInfo(string authorization, string projectId, string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// Count collections
        /// </summary>
        /// <remarks>
        /// Count total collections in game.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to count collections in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>decimal</returns>
        decimal CollectionControllerCollectionsCountByGameId(string authorization, string projectId, int operationIndex = 0);

        /// <summary>
        /// Count collections
        /// </summary>
        /// <remarks>
        /// Count total collections in game.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to count collections in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of decimal</returns>
        ApiResponse<decimal> CollectionControllerCollectionsCountByGameIdWithHttpInfo(string authorization, string projectId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve collection by ID
        /// </summary>
        /// <remarks>
        /// This API method retrieves a specific collection based on the unique identifier provided in the request.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="id">Collection ID to find</param>
        /// <param name="projectId">Game/project ID to find collection in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Collection</returns>
        System.Threading.Tasks.Task<Collection> CollectionControllerCollectionByIdAsync(string authorization, string id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve collection by ID
        /// </summary>
        /// <remarks>
        /// This API method retrieves a specific collection based on the unique identifier provided in the request.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="id">Collection ID to find</param>
        /// <param name="projectId">Game/project ID to find collection in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection>> CollectionControllerCollectionByIdWithHttpInfoAsync(string authorization, string id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve collections
        /// </summary>
        /// <remarks>
        /// This API method retrieves a list of collections that match the specified filter criteria. Developers can use this method to retrieve collections by name, category, status, or other properties.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to find collections in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="sort">Collection field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search collections by name (optional)</param>
        /// <param name="limit">Number of collections to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Collection&gt;</returns>
        System.Threading.Tasks.Task<List<Collection>> CollectionControllerCollectionsAsync(string authorization, string projectId, string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve collections
        /// </summary>
        /// <remarks>
        /// This API method retrieves a list of collections that match the specified filter criteria. Developers can use this method to retrieve collections by name, category, status, or other properties.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to find collections in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="sort">Collection field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search collections by name (optional)</param>
        /// <param name="limit">Number of collections to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Collection&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Collection>>> CollectionControllerCollectionsWithHttpInfoAsync(string authorization, string projectId, string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Count collections
        /// </summary>
        /// <remarks>
        /// Count total collections in game.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to count collections in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of decimal</returns>
        System.Threading.Tasks.Task<decimal> CollectionControllerCollectionsCountByGameIdAsync(string authorization, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Count collections
        /// </summary>
        /// <remarks>
        /// Count total collections in game.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to count collections in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (decimal)</returns>
        System.Threading.Tasks.Task<ApiResponse<decimal>> CollectionControllerCollectionsCountByGameIdWithHttpInfoAsync(string authorization, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionApi : ICollectionApiSync, ICollectionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CollectionApi : ICollectionApi
    {
        private L3vels.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CollectionApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CollectionApi(string basePath)
        {
            this.Configuration = L3vels.Sdk.Client.Configuration.MergeConfigurations(
                L3vels.Sdk.Client.GlobalConfiguration.Instance,
                new L3vels.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new L3vels.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new L3vels.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = L3vels.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CollectionApi(L3vels.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = L3vels.Sdk.Client.Configuration.MergeConfigurations(
                L3vels.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new L3vels.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new L3vels.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = L3vels.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CollectionApi(L3vels.Sdk.Client.ISynchronousClient client, L3vels.Sdk.Client.IAsynchronousClient asyncClient, L3vels.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = L3vels.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public L3vels.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public L3vels.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public L3vels.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public L3vels.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve collection by ID This API method retrieves a specific collection based on the unique identifier provided in the request.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="id">Collection ID to find</param>
        /// <param name="projectId">Game/project ID to find collection in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Collection</returns>
        public Collection CollectionControllerCollectionById(string authorization, string id, string projectId, int operationIndex = 0)
        {
            L3vels.Sdk.Client.ApiResponse<Collection> localVarResponse = CollectionControllerCollectionByIdWithHttpInfo(authorization, id, projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve collection by ID This API method retrieves a specific collection based on the unique identifier provided in the request.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="id">Collection ID to find</param>
        /// <param name="projectId">Game/project ID to find collection in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Collection</returns>
        public L3vels.Sdk.Client.ApiResponse<Collection> CollectionControllerCollectionByIdWithHttpInfo(string authorization, string id, string projectId, int operationIndex = 0)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling CollectionApi->CollectionControllerCollectionById");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling CollectionApi->CollectionControllerCollectionById");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling CollectionApi->CollectionControllerCollectionById");
            }

            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", L3vels.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", L3vels.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "CollectionApi.CollectionControllerCollectionById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Collection>("/v1/collection/{project_id}/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerCollectionById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve collection by ID This API method retrieves a specific collection based on the unique identifier provided in the request.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="id">Collection ID to find</param>
        /// <param name="projectId">Game/project ID to find collection in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Collection</returns>
        public async System.Threading.Tasks.Task<Collection> CollectionControllerCollectionByIdAsync(string authorization, string id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            L3vels.Sdk.Client.ApiResponse<Collection> localVarResponse = await CollectionControllerCollectionByIdWithHttpInfoAsync(authorization, id, projectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve collection by ID This API method retrieves a specific collection based on the unique identifier provided in the request.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="id">Collection ID to find</param>
        /// <param name="projectId">Game/project ID to find collection in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        public async System.Threading.Tasks.Task<L3vels.Sdk.Client.ApiResponse<Collection>> CollectionControllerCollectionByIdWithHttpInfoAsync(string authorization, string id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling CollectionApi->CollectionControllerCollectionById");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling CollectionApi->CollectionControllerCollectionById");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling CollectionApi->CollectionControllerCollectionById");
            }


            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", L3vels.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", L3vels.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "CollectionApi.CollectionControllerCollectionById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Collection>("/v1/collection/{project_id}/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerCollectionById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve collections This API method retrieves a list of collections that match the specified filter criteria. Developers can use this method to retrieve collections by name, category, status, or other properties.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to find collections in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="sort">Collection field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search collections by name (optional)</param>
        /// <param name="limit">Number of collections to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Collection&gt;</returns>
        public List<Collection> CollectionControllerCollections(string authorization, string projectId, string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0)
        {
            L3vels.Sdk.Client.ApiResponse<List<Collection>> localVarResponse = CollectionControllerCollectionsWithHttpInfo(authorization, projectId, sort, order, searchText, limit, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve collections This API method retrieves a list of collections that match the specified filter criteria. Developers can use this method to retrieve collections by name, category, status, or other properties.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to find collections in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="sort">Collection field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search collections by name (optional)</param>
        /// <param name="limit">Number of collections to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Collection&gt;</returns>
        public L3vels.Sdk.Client.ApiResponse<List<Collection>> CollectionControllerCollectionsWithHttpInfo(string authorization, string projectId, string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling CollectionApi->CollectionControllerCollections");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling CollectionApi->CollectionControllerCollections");
            }

            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "project_id", projectId));
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "search_text", searchText));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "CollectionApi.CollectionControllerCollections";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Collection>>("/v1/collection", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerCollections", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve collections This API method retrieves a list of collections that match the specified filter criteria. Developers can use this method to retrieve collections by name, category, status, or other properties.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to find collections in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="sort">Collection field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search collections by name (optional)</param>
        /// <param name="limit">Number of collections to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Collection&gt;</returns>
        public async System.Threading.Tasks.Task<List<Collection>> CollectionControllerCollectionsAsync(string authorization, string projectId, string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            L3vels.Sdk.Client.ApiResponse<List<Collection>> localVarResponse = await CollectionControllerCollectionsWithHttpInfoAsync(authorization, projectId, sort, order, searchText, limit, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve collections This API method retrieves a list of collections that match the specified filter criteria. Developers can use this method to retrieve collections by name, category, status, or other properties.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to find collections in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="sort">Collection field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search collections by name (optional)</param>
        /// <param name="limit">Number of collections to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Collection&gt;)</returns>
        public async System.Threading.Tasks.Task<L3vels.Sdk.Client.ApiResponse<List<Collection>>> CollectionControllerCollectionsWithHttpInfoAsync(string authorization, string projectId, string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling CollectionApi->CollectionControllerCollections");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling CollectionApi->CollectionControllerCollections");
            }


            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "project_id", projectId));
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "search_text", searchText));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "CollectionApi.CollectionControllerCollections";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Collection>>("/v1/collection", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerCollections", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Count collections Count total collections in game.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to count collections in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>decimal</returns>
        public decimal CollectionControllerCollectionsCountByGameId(string authorization, string projectId, int operationIndex = 0)
        {
            L3vels.Sdk.Client.ApiResponse<decimal> localVarResponse = CollectionControllerCollectionsCountByGameIdWithHttpInfo(authorization, projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Count collections Count total collections in game.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to count collections in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of decimal</returns>
        public L3vels.Sdk.Client.ApiResponse<decimal> CollectionControllerCollectionsCountByGameIdWithHttpInfo(string authorization, string projectId, int operationIndex = 0)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling CollectionApi->CollectionControllerCollectionsCountByGameId");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling CollectionApi->CollectionControllerCollectionsCountByGameId");
            }

            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", L3vels.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "CollectionApi.CollectionControllerCollectionsCountByGameId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<decimal>("/v1/collection/count/{project_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerCollectionsCountByGameId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Count collections Count total collections in game.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to count collections in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of decimal</returns>
        public async System.Threading.Tasks.Task<decimal> CollectionControllerCollectionsCountByGameIdAsync(string authorization, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            L3vels.Sdk.Client.ApiResponse<decimal> localVarResponse = await CollectionControllerCollectionsCountByGameIdWithHttpInfoAsync(authorization, projectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Count collections Count total collections in game.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to count collections in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (decimal)</returns>
        public async System.Threading.Tasks.Task<L3vels.Sdk.Client.ApiResponse<decimal>> CollectionControllerCollectionsCountByGameIdWithHttpInfoAsync(string authorization, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling CollectionApi->CollectionControllerCollectionsCountByGameId");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling CollectionApi->CollectionControllerCollectionsCountByGameId");
            }


            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", L3vels.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "CollectionApi.CollectionControllerCollectionsCountByGameId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<decimal>("/v1/collection/count/{project_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionControllerCollectionsCountByGameId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
