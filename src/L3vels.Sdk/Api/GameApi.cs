/*
 * L3vels Api
 *
 * L3vels API for Game developers
 *
 * The version of the OpenAPI document: 0.3
 * Contact: support@l3vels.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using L3vels.Sdk.Client;
using L3vels.Sdk.Model;

namespace L3vels.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGameApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Game
        /// </summary>
        /// <remarks>
        /// Create game on platform.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Game</returns>
        Game CreateGame(string authorization, Object body, int operationIndex = 0);

        /// <summary>
        /// Create Game
        /// </summary>
        /// <remarks>
        /// Create game on platform.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Game</returns>
        ApiResponse<Game> CreateGameWithHttpInfo(string authorization, Object body, int operationIndex = 0);
        /// <summary>
        /// Retrieve all games
        /// </summary>
        /// <remarks>
        /// Retrieve all your games/games created on the platform. You can filter games by name, description. You can sort games by field
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID</param>
        /// <param name="sort">In which order to sort the results. Can be ASC for ascending or DESC for descending order (optional)</param>
        /// <param name="searchText">Filter by game name or description (optional)</param>
        /// <param name="limit">Number of players to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Game</returns>
        Game GameControllerGetGames(string authorization, string gameId, string sort = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// Retrieve all games
        /// </summary>
        /// <remarks>
        /// Retrieve all your games/games created on the platform. You can filter games by name, description. You can sort games by field
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID</param>
        /// <param name="sort">In which order to sort the results. Can be ASC for ascending or DESC for descending order (optional)</param>
        /// <param name="searchText">Filter by game name or description (optional)</param>
        /// <param name="limit">Number of players to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Game</returns>
        ApiResponse<Game> GameControllerGetGamesWithHttpInfo(string authorization, string gameId, string sort = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// Retrieve Game
        /// </summary>
        /// <remarks>
        /// Get Game by ID created on the platform.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Game</returns>
        Game GetGameById(string authorization, string gameId, int operationIndex = 0);

        /// <summary>
        /// Retrieve Game
        /// </summary>
        /// <remarks>
        /// Get Game by ID created on the platform.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Game</returns>
        ApiResponse<Game> GetGameByIdWithHttpInfo(string authorization, string gameId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGameApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Game
        /// </summary>
        /// <remarks>
        /// Create game on platform.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Game</returns>
        System.Threading.Tasks.Task<Game> CreateGameAsync(string authorization, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Game
        /// </summary>
        /// <remarks>
        /// Create game on platform.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Game)</returns>
        System.Threading.Tasks.Task<ApiResponse<Game>> CreateGameWithHttpInfoAsync(string authorization, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve all games
        /// </summary>
        /// <remarks>
        /// Retrieve all your games/games created on the platform. You can filter games by name, description. You can sort games by field
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID</param>
        /// <param name="sort">In which order to sort the results. Can be ASC for ascending or DESC for descending order (optional)</param>
        /// <param name="searchText">Filter by game name or description (optional)</param>
        /// <param name="limit">Number of players to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Game</returns>
        System.Threading.Tasks.Task<Game> GameControllerGetGamesAsync(string authorization, string gameId, string sort = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all games
        /// </summary>
        /// <remarks>
        /// Retrieve all your games/games created on the platform. You can filter games by name, description. You can sort games by field
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID</param>
        /// <param name="sort">In which order to sort the results. Can be ASC for ascending or DESC for descending order (optional)</param>
        /// <param name="searchText">Filter by game name or description (optional)</param>
        /// <param name="limit">Number of players to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Game)</returns>
        System.Threading.Tasks.Task<ApiResponse<Game>> GameControllerGetGamesWithHttpInfoAsync(string authorization, string gameId, string sort = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Game
        /// </summary>
        /// <remarks>
        /// Get Game by ID created on the platform.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Game</returns>
        System.Threading.Tasks.Task<Game> GetGameByIdAsync(string authorization, string gameId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Game
        /// </summary>
        /// <remarks>
        /// Get Game by ID created on the platform.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Game)</returns>
        System.Threading.Tasks.Task<ApiResponse<Game>> GetGameByIdWithHttpInfoAsync(string authorization, string gameId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGameApi : IGameApiSync, IGameApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GameApi : IGameApi
    {
        private L3vels.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GameApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GameApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GameApi(string basePath)
        {
            this.Configuration = L3vels.Sdk.Client.Configuration.MergeConfigurations(
                L3vels.Sdk.Client.GlobalConfiguration.Instance,
                new L3vels.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new L3vels.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new L3vels.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = L3vels.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GameApi(L3vels.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = L3vels.Sdk.Client.Configuration.MergeConfigurations(
                L3vels.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new L3vels.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new L3vels.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = L3vels.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GameApi(L3vels.Sdk.Client.ISynchronousClient client, L3vels.Sdk.Client.IAsynchronousClient asyncClient, L3vels.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = L3vels.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public L3vels.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public L3vels.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public L3vels.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public L3vels.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Game Create game on platform.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Game</returns>
        public Game CreateGame(string authorization, Object body, int operationIndex = 0)
        {
            L3vels.Sdk.Client.ApiResponse<Game> localVarResponse = CreateGameWithHttpInfo(authorization, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Game Create game on platform.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Game</returns>
        public L3vels.Sdk.Client.ApiResponse<Game> CreateGameWithHttpInfo(string authorization, Object body, int operationIndex = 0)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling GameApi->CreateGame");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling GameApi->CreateGame");
            }

            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "GameApi.CreateGame";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Game>("/v1/game", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGame", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Game Create game on platform.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Game</returns>
        public async System.Threading.Tasks.Task<Game> CreateGameAsync(string authorization, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            L3vels.Sdk.Client.ApiResponse<Game> localVarResponse = await CreateGameWithHttpInfoAsync(authorization, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Game Create game on platform.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Game)</returns>
        public async System.Threading.Tasks.Task<L3vels.Sdk.Client.ApiResponse<Game>> CreateGameWithHttpInfoAsync(string authorization, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling GameApi->CreateGame");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'body' when calling GameApi->CreateGame");
            }


            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "GameApi.CreateGame";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Game>("/v1/game", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGame", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all games Retrieve all your games/games created on the platform. You can filter games by name, description. You can sort games by field
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID</param>
        /// <param name="sort">In which order to sort the results. Can be ASC for ascending or DESC for descending order (optional)</param>
        /// <param name="searchText">Filter by game name or description (optional)</param>
        /// <param name="limit">Number of players to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Game</returns>
        public Game GameControllerGetGames(string authorization, string gameId, string sort = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0)
        {
            L3vels.Sdk.Client.ApiResponse<Game> localVarResponse = GameControllerGetGamesWithHttpInfo(authorization, gameId, sort, searchText, limit, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all games Retrieve all your games/games created on the platform. You can filter games by name, description. You can sort games by field
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID</param>
        /// <param name="sort">In which order to sort the results. Can be ASC for ascending or DESC for descending order (optional)</param>
        /// <param name="searchText">Filter by game name or description (optional)</param>
        /// <param name="limit">Number of players to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Game</returns>
        public L3vels.Sdk.Client.ApiResponse<Game> GameControllerGetGamesWithHttpInfo(string authorization, string gameId, string sort = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling GameApi->GameControllerGetGames");
            }

            // verify the required parameter 'gameId' is set
            if (gameId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'gameId' when calling GameApi->GameControllerGetGames");
            }

            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "search_text", searchText));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "game_id", gameId));
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "GameApi.GameControllerGetGames";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Game>("/v1/game", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameControllerGetGames", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all games Retrieve all your games/games created on the platform. You can filter games by name, description. You can sort games by field
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID</param>
        /// <param name="sort">In which order to sort the results. Can be ASC for ascending or DESC for descending order (optional)</param>
        /// <param name="searchText">Filter by game name or description (optional)</param>
        /// <param name="limit">Number of players to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Game</returns>
        public async System.Threading.Tasks.Task<Game> GameControllerGetGamesAsync(string authorization, string gameId, string sort = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            L3vels.Sdk.Client.ApiResponse<Game> localVarResponse = await GameControllerGetGamesWithHttpInfoAsync(authorization, gameId, sort, searchText, limit, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all games Retrieve all your games/games created on the platform. You can filter games by name, description. You can sort games by field
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID</param>
        /// <param name="sort">In which order to sort the results. Can be ASC for ascending or DESC for descending order (optional)</param>
        /// <param name="searchText">Filter by game name or description (optional)</param>
        /// <param name="limit">Number of players to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Game)</returns>
        public async System.Threading.Tasks.Task<L3vels.Sdk.Client.ApiResponse<Game>> GameControllerGetGamesWithHttpInfoAsync(string authorization, string gameId, string sort = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling GameApi->GameControllerGetGames");
            }

            // verify the required parameter 'gameId' is set
            if (gameId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'gameId' when calling GameApi->GameControllerGetGames");
            }


            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "search_text", searchText));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "game_id", gameId));
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "GameApi.GameControllerGetGames";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Game>("/v1/game", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameControllerGetGames", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Game Get Game by ID created on the platform.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Game</returns>
        public Game GetGameById(string authorization, string gameId, int operationIndex = 0)
        {
            L3vels.Sdk.Client.ApiResponse<Game> localVarResponse = GetGameByIdWithHttpInfo(authorization, gameId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Game Get Game by ID created on the platform.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Game</returns>
        public L3vels.Sdk.Client.ApiResponse<Game> GetGameByIdWithHttpInfo(string authorization, string gameId, int operationIndex = 0)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling GameApi->GetGameById");
            }

            // verify the required parameter 'gameId' is set
            if (gameId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'gameId' when calling GameApi->GetGameById");
            }

            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("game_id", L3vels.Sdk.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "GameApi.GetGameById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Game>("/v1/game/{game_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGameById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Game Get Game by ID created on the platform.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Game</returns>
        public async System.Threading.Tasks.Task<Game> GetGameByIdAsync(string authorization, string gameId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            L3vels.Sdk.Client.ApiResponse<Game> localVarResponse = await GetGameByIdWithHttpInfoAsync(authorization, gameId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Game Get Game by ID created on the platform.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Game)</returns>
        public async System.Threading.Tasks.Task<L3vels.Sdk.Client.ApiResponse<Game>> GetGameByIdWithHttpInfoAsync(string authorization, string gameId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling GameApi->GetGameById");
            }

            // verify the required parameter 'gameId' is set
            if (gameId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'gameId' when calling GameApi->GetGameById");
            }


            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("game_id", L3vels.Sdk.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "GameApi.GetGameById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Game>("/v1/game/{game_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGameById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
