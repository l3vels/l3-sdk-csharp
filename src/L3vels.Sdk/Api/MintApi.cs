/*
 * L3vels Api
 *
 * L3vels API for Game developers
 *
 * The version of the OpenAPI document: 0.3
 * Contact: support@l3vels.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using L3vels.Sdk.Client;
using L3vels.Sdk.Model;

namespace L3vels.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMintApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Airdrop asset to player
        /// </summary>
        /// <remarks>
        /// Airdrop asset to player
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AirdropAssetToPlayer(string authorization, MintInput mintInput, int operationIndex = 0);

        /// <summary>
        /// Airdrop asset to player
        /// </summary>
        /// <remarks>
        /// Airdrop asset to player
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AirdropAssetToPlayerWithHttpInfo(string authorization, MintInput mintInput, int operationIndex = 0);
        /// <summary>
        /// Award asset to player
        /// </summary>
        /// <remarks>
        /// Award asset to player
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AwardAssetToPlayer(string authorization, MintInput mintInput, int operationIndex = 0);

        /// <summary>
        /// Award asset to player
        /// </summary>
        /// <remarks>
        /// Award asset to player
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AwardAssetToPlayerWithHttpInfo(string authorization, MintInput mintInput, int operationIndex = 0);
        /// <summary>
        /// Batch mint assets by player
        /// </summary>
        /// <remarks>
        /// Batch mint assets by player. Player must have enough balance to mint.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintBatchInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void BatchMintAssetByPlayer(string authorization, MintBatchInput mintBatchInput, int operationIndex = 0);

        /// <summary>
        /// Batch mint assets by player
        /// </summary>
        /// <remarks>
        /// Batch mint assets by player. Player must have enough balance to mint.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintBatchInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BatchMintAssetByPlayerWithHttpInfo(string authorization, MintBatchInput mintBatchInput, int operationIndex = 0);
        /// <summary>
        /// Mint asset
        /// </summary>
        /// <remarks>
        /// Mint an asset by admin to player
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void MintAsset(string authorization, MintInput mintInput, int operationIndex = 0);

        /// <summary>
        /// Mint asset
        /// </summary>
        /// <remarks>
        /// Mint an asset by admin to player
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MintAssetWithHttpInfo(string authorization, MintInput mintInput, int operationIndex = 0);
        /// <summary>
        /// Mint asset by player
        /// </summary>
        /// <remarks>
        /// Mint asset by player. Player must have enough balance to mint.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void MintAssetByPlayer(string authorization, MintInput mintInput, int operationIndex = 0);

        /// <summary>
        /// Mint asset by player
        /// </summary>
        /// <remarks>
        /// Mint asset by player. Player must have enough balance to mint.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MintAssetByPlayerWithHttpInfo(string authorization, MintInput mintInput, int operationIndex = 0);
        /// <summary>
        /// Batch mint assets
        /// </summary>
        /// <remarks>
        /// Batch mint assets by admin to player
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintBatchInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void MintBatchAsset(string authorization, MintBatchInput mintBatchInput, int operationIndex = 0);

        /// <summary>
        /// Batch mint assets
        /// </summary>
        /// <remarks>
        /// Batch mint assets by admin to player
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintBatchInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MintBatchAssetWithHttpInfo(string authorization, MintBatchInput mintBatchInput, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMintApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Airdrop asset to player
        /// </summary>
        /// <remarks>
        /// Airdrop asset to player
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AirdropAssetToPlayerAsync(string authorization, MintInput mintInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Airdrop asset to player
        /// </summary>
        /// <remarks>
        /// Airdrop asset to player
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AirdropAssetToPlayerWithHttpInfoAsync(string authorization, MintInput mintInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Award asset to player
        /// </summary>
        /// <remarks>
        /// Award asset to player
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AwardAssetToPlayerAsync(string authorization, MintInput mintInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Award asset to player
        /// </summary>
        /// <remarks>
        /// Award asset to player
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AwardAssetToPlayerWithHttpInfoAsync(string authorization, MintInput mintInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Batch mint assets by player
        /// </summary>
        /// <remarks>
        /// Batch mint assets by player. Player must have enough balance to mint.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintBatchInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BatchMintAssetByPlayerAsync(string authorization, MintBatchInput mintBatchInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Batch mint assets by player
        /// </summary>
        /// <remarks>
        /// Batch mint assets by player. Player must have enough balance to mint.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintBatchInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BatchMintAssetByPlayerWithHttpInfoAsync(string authorization, MintBatchInput mintBatchInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Mint asset
        /// </summary>
        /// <remarks>
        /// Mint an asset by admin to player
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MintAssetAsync(string authorization, MintInput mintInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Mint asset
        /// </summary>
        /// <remarks>
        /// Mint an asset by admin to player
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MintAssetWithHttpInfoAsync(string authorization, MintInput mintInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Mint asset by player
        /// </summary>
        /// <remarks>
        /// Mint asset by player. Player must have enough balance to mint.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MintAssetByPlayerAsync(string authorization, MintInput mintInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Mint asset by player
        /// </summary>
        /// <remarks>
        /// Mint asset by player. Player must have enough balance to mint.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MintAssetByPlayerWithHttpInfoAsync(string authorization, MintInput mintInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Batch mint assets
        /// </summary>
        /// <remarks>
        /// Batch mint assets by admin to player
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintBatchInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MintBatchAssetAsync(string authorization, MintBatchInput mintBatchInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Batch mint assets
        /// </summary>
        /// <remarks>
        /// Batch mint assets by admin to player
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintBatchInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MintBatchAssetWithHttpInfoAsync(string authorization, MintBatchInput mintBatchInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMintApi : IMintApiSync, IMintApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MintApi : IMintApi
    {
        private L3vels.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MintApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MintApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MintApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MintApi(string basePath)
        {
            this.Configuration = L3vels.Sdk.Client.Configuration.MergeConfigurations(
                L3vels.Sdk.Client.GlobalConfiguration.Instance,
                new L3vels.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new L3vels.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new L3vels.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = L3vels.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MintApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MintApi(L3vels.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = L3vels.Sdk.Client.Configuration.MergeConfigurations(
                L3vels.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new L3vels.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new L3vels.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = L3vels.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MintApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MintApi(L3vels.Sdk.Client.ISynchronousClient client, L3vels.Sdk.Client.IAsynchronousClient asyncClient, L3vels.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = L3vels.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public L3vels.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public L3vels.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public L3vels.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public L3vels.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Airdrop asset to player Airdrop asset to player
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AirdropAssetToPlayer(string authorization, MintInput mintInput, int operationIndex = 0)
        {
            AirdropAssetToPlayerWithHttpInfo(authorization, mintInput);
        }

        /// <summary>
        /// Airdrop asset to player Airdrop asset to player
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public L3vels.Sdk.Client.ApiResponse<Object> AirdropAssetToPlayerWithHttpInfo(string authorization, MintInput mintInput, int operationIndex = 0)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling MintApi->AirdropAssetToPlayer");
            }

            // verify the required parameter 'mintInput' is set
            if (mintInput == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'mintInput' when calling MintApi->AirdropAssetToPlayer");
            }

            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = mintInput;

            localVarRequestOptions.Operation = "MintApi.AirdropAssetToPlayer";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/mint/airdrop", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AirdropAssetToPlayer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Airdrop asset to player Airdrop asset to player
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AirdropAssetToPlayerAsync(string authorization, MintInput mintInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AirdropAssetToPlayerWithHttpInfoAsync(authorization, mintInput, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Airdrop asset to player Airdrop asset to player
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<L3vels.Sdk.Client.ApiResponse<Object>> AirdropAssetToPlayerWithHttpInfoAsync(string authorization, MintInput mintInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling MintApi->AirdropAssetToPlayer");
            }

            // verify the required parameter 'mintInput' is set
            if (mintInput == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'mintInput' when calling MintApi->AirdropAssetToPlayer");
            }


            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = mintInput;

            localVarRequestOptions.Operation = "MintApi.AirdropAssetToPlayer";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/mint/airdrop", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AirdropAssetToPlayer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Award asset to player Award asset to player
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AwardAssetToPlayer(string authorization, MintInput mintInput, int operationIndex = 0)
        {
            AwardAssetToPlayerWithHttpInfo(authorization, mintInput);
        }

        /// <summary>
        /// Award asset to player Award asset to player
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public L3vels.Sdk.Client.ApiResponse<Object> AwardAssetToPlayerWithHttpInfo(string authorization, MintInput mintInput, int operationIndex = 0)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling MintApi->AwardAssetToPlayer");
            }

            // verify the required parameter 'mintInput' is set
            if (mintInput == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'mintInput' when calling MintApi->AwardAssetToPlayer");
            }

            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = mintInput;

            localVarRequestOptions.Operation = "MintApi.AwardAssetToPlayer";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/mint/award", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AwardAssetToPlayer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Award asset to player Award asset to player
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AwardAssetToPlayerAsync(string authorization, MintInput mintInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AwardAssetToPlayerWithHttpInfoAsync(authorization, mintInput, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Award asset to player Award asset to player
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<L3vels.Sdk.Client.ApiResponse<Object>> AwardAssetToPlayerWithHttpInfoAsync(string authorization, MintInput mintInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling MintApi->AwardAssetToPlayer");
            }

            // verify the required parameter 'mintInput' is set
            if (mintInput == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'mintInput' when calling MintApi->AwardAssetToPlayer");
            }


            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = mintInput;

            localVarRequestOptions.Operation = "MintApi.AwardAssetToPlayer";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/mint/award", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AwardAssetToPlayer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch mint assets by player Batch mint assets by player. Player must have enough balance to mint.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintBatchInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void BatchMintAssetByPlayer(string authorization, MintBatchInput mintBatchInput, int operationIndex = 0)
        {
            BatchMintAssetByPlayerWithHttpInfo(authorization, mintBatchInput);
        }

        /// <summary>
        /// Batch mint assets by player Batch mint assets by player. Player must have enough balance to mint.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintBatchInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public L3vels.Sdk.Client.ApiResponse<Object> BatchMintAssetByPlayerWithHttpInfo(string authorization, MintBatchInput mintBatchInput, int operationIndex = 0)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling MintApi->BatchMintAssetByPlayer");
            }

            // verify the required parameter 'mintBatchInput' is set
            if (mintBatchInput == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'mintBatchInput' when calling MintApi->BatchMintAssetByPlayer");
            }

            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = mintBatchInput;

            localVarRequestOptions.Operation = "MintApi.BatchMintAssetByPlayer";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/mint/batch-player", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchMintAssetByPlayer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch mint assets by player Batch mint assets by player. Player must have enough balance to mint.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintBatchInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BatchMintAssetByPlayerAsync(string authorization, MintBatchInput mintBatchInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await BatchMintAssetByPlayerWithHttpInfoAsync(authorization, mintBatchInput, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Batch mint assets by player Batch mint assets by player. Player must have enough balance to mint.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintBatchInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<L3vels.Sdk.Client.ApiResponse<Object>> BatchMintAssetByPlayerWithHttpInfoAsync(string authorization, MintBatchInput mintBatchInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling MintApi->BatchMintAssetByPlayer");
            }

            // verify the required parameter 'mintBatchInput' is set
            if (mintBatchInput == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'mintBatchInput' when calling MintApi->BatchMintAssetByPlayer");
            }


            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = mintBatchInput;

            localVarRequestOptions.Operation = "MintApi.BatchMintAssetByPlayer";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/mint/batch-player", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchMintAssetByPlayer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mint asset Mint an asset by admin to player
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void MintAsset(string authorization, MintInput mintInput, int operationIndex = 0)
        {
            MintAssetWithHttpInfo(authorization, mintInput);
        }

        /// <summary>
        /// Mint asset Mint an asset by admin to player
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public L3vels.Sdk.Client.ApiResponse<Object> MintAssetWithHttpInfo(string authorization, MintInput mintInput, int operationIndex = 0)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling MintApi->MintAsset");
            }

            // verify the required parameter 'mintInput' is set
            if (mintInput == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'mintInput' when calling MintApi->MintAsset");
            }

            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = mintInput;

            localVarRequestOptions.Operation = "MintApi.MintAsset";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/mint", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MintAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mint asset Mint an asset by admin to player
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MintAssetAsync(string authorization, MintInput mintInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await MintAssetWithHttpInfoAsync(authorization, mintInput, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Mint asset Mint an asset by admin to player
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<L3vels.Sdk.Client.ApiResponse<Object>> MintAssetWithHttpInfoAsync(string authorization, MintInput mintInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling MintApi->MintAsset");
            }

            // verify the required parameter 'mintInput' is set
            if (mintInput == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'mintInput' when calling MintApi->MintAsset");
            }


            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = mintInput;

            localVarRequestOptions.Operation = "MintApi.MintAsset";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/mint", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MintAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mint asset by player Mint asset by player. Player must have enough balance to mint.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void MintAssetByPlayer(string authorization, MintInput mintInput, int operationIndex = 0)
        {
            MintAssetByPlayerWithHttpInfo(authorization, mintInput);
        }

        /// <summary>
        /// Mint asset by player Mint asset by player. Player must have enough balance to mint.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public L3vels.Sdk.Client.ApiResponse<Object> MintAssetByPlayerWithHttpInfo(string authorization, MintInput mintInput, int operationIndex = 0)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling MintApi->MintAssetByPlayer");
            }

            // verify the required parameter 'mintInput' is set
            if (mintInput == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'mintInput' when calling MintApi->MintAssetByPlayer");
            }

            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = mintInput;

            localVarRequestOptions.Operation = "MintApi.MintAssetByPlayer";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/mint/player", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MintAssetByPlayer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mint asset by player Mint asset by player. Player must have enough balance to mint.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MintAssetByPlayerAsync(string authorization, MintInput mintInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await MintAssetByPlayerWithHttpInfoAsync(authorization, mintInput, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Mint asset by player Mint asset by player. Player must have enough balance to mint.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<L3vels.Sdk.Client.ApiResponse<Object>> MintAssetByPlayerWithHttpInfoAsync(string authorization, MintInput mintInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling MintApi->MintAssetByPlayer");
            }

            // verify the required parameter 'mintInput' is set
            if (mintInput == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'mintInput' when calling MintApi->MintAssetByPlayer");
            }


            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = mintInput;

            localVarRequestOptions.Operation = "MintApi.MintAssetByPlayer";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/mint/player", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MintAssetByPlayer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch mint assets Batch mint assets by admin to player
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintBatchInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void MintBatchAsset(string authorization, MintBatchInput mintBatchInput, int operationIndex = 0)
        {
            MintBatchAssetWithHttpInfo(authorization, mintBatchInput);
        }

        /// <summary>
        /// Batch mint assets Batch mint assets by admin to player
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintBatchInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public L3vels.Sdk.Client.ApiResponse<Object> MintBatchAssetWithHttpInfo(string authorization, MintBatchInput mintBatchInput, int operationIndex = 0)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling MintApi->MintBatchAsset");
            }

            // verify the required parameter 'mintBatchInput' is set
            if (mintBatchInput == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'mintBatchInput' when calling MintApi->MintBatchAsset");
            }

            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = mintBatchInput;

            localVarRequestOptions.Operation = "MintApi.MintBatchAsset";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/mint/batch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MintBatchAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch mint assets Batch mint assets by admin to player
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintBatchInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MintBatchAssetAsync(string authorization, MintBatchInput mintBatchInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await MintBatchAssetWithHttpInfoAsync(authorization, mintBatchInput, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Batch mint assets Batch mint assets by admin to player
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="mintBatchInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<L3vels.Sdk.Client.ApiResponse<Object>> MintBatchAssetWithHttpInfoAsync(string authorization, MintBatchInput mintBatchInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling MintApi->MintBatchAsset");
            }

            // verify the required parameter 'mintBatchInput' is set
            if (mintBatchInput == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'mintBatchInput' when calling MintApi->MintBatchAsset");
            }


            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = mintBatchInput;

            localVarRequestOptions.Operation = "MintApi.MintBatchAsset";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/mint/batch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MintBatchAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
