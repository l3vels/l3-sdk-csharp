/*
 * L3vels Api
 *
 * L3vels API for Game developers
 *
 * The version of the OpenAPI document: 0.3
 * Contact: support@l3vels.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using L3vels.Sdk.Client;
using L3vels.Sdk.Model;

namespace L3vels.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlayerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Count players
        /// </summary>
        /// <remarks>
        /// Count players in game. Example: count players in game Call of Duty.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>decimal</returns>
        decimal CountPlayersByGameId(string authorization, string projectId, int operationIndex = 0);

        /// <summary>
        /// Count players
        /// </summary>
        /// <remarks>
        /// Count players in game. Example: count players in game Call of Duty.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of decimal</returns>
        ApiResponse<decimal> CountPlayersByGameIdWithHttpInfo(string authorization, string projectId, int operationIndex = 0);
        /// <summary>
        /// Create new player
        /// </summary>
        /// <remarks>
        /// Create new player for game/project. Example: Create new player Jack in game Call of Duty.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="createPlayerDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Player</returns>
        Player CreatePlayer(string authorization, CreatePlayerDto createPlayerDto, int operationIndex = 0);

        /// <summary>
        /// Create new player
        /// </summary>
        /// <remarks>
        /// Create new player for game/project. Example: Create new player Jack in game Call of Duty.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="createPlayerDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Player</returns>
        ApiResponse<Player> CreatePlayerWithHttpInfo(string authorization, CreatePlayerDto createPlayerDto, int operationIndex = 0);
        /// <summary>
        /// Retrieve player by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific player by ID associated with game/project. Example: retrieve player Jack from game Call of Duty.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="id">Player ID that you created in your game/project. Example: Jack, George, etc.</param>
        /// <param name="projectId">Game/project ID to find asset in. Example: Call of Duty, Fortnite, etc.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Player</returns>
        Player GetPlayerById(string authorization, string id, string projectId, int operationIndex = 0);

        /// <summary>
        /// Retrieve player by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific player by ID associated with game/project. Example: retrieve player Jack from game Call of Duty.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="id">Player ID that you created in your game/project. Example: Jack, George, etc.</param>
        /// <param name="projectId">Game/project ID to find asset in. Example: Call of Duty, Fortnite, etc.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Player</returns>
        ApiResponse<Player> GetPlayerByIdWithHttpInfo(string authorization, string id, string projectId, int operationIndex = 0);
        /// <summary>
        /// Retrieve players
        /// </summary>
        /// <remarks>
        /// Retrieve a list of players that match the specified filter criteria. Developers can use this method to retrieve players by name, category, status, or other properties. Example: Retrieve players from game Call of Duty.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to find player in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="sort">Player field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search player by name (optional)</param>
        /// <param name="limit">Number of players to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Player&gt;</returns>
        List<Player> GetPlayers(string authorization, string projectId, string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// Retrieve players
        /// </summary>
        /// <remarks>
        /// Retrieve a list of players that match the specified filter criteria. Developers can use this method to retrieve players by name, category, status, or other properties. Example: Retrieve players from game Call of Duty.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to find player in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="sort">Player field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search player by name (optional)</param>
        /// <param name="limit">Number of players to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Player&gt;</returns>
        ApiResponse<List<Player>> GetPlayersWithHttpInfo(string authorization, string projectId, string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// Retrieve player asset by ID
        /// </summary>
        /// <remarks>
        /// Retrieve player asset by ID. Player asset represents a single asset that a player owns. It has amount field that represents how many of this asset player owns.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="id"></param>
        /// <param name="projectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlayerAsset</returns>
        PlayerAsset PlayerAssetControllerPlayerAssetById(string authorization, string id, string projectId, int operationIndex = 0);

        /// <summary>
        /// Retrieve player asset by ID
        /// </summary>
        /// <remarks>
        /// Retrieve player asset by ID. Player asset represents a single asset that a player owns. It has amount field that represents how many of this asset player owns.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="id"></param>
        /// <param name="projectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlayerAsset</returns>
        ApiResponse<PlayerAsset> PlayerAssetControllerPlayerAssetByIdWithHttpInfo(string authorization, string id, string projectId, int operationIndex = 0);
        /// <summary>
        /// Retrieve player assets
        /// </summary>
        /// <remarks>
        /// This API method retrieves a list of Player assets that match the specified filter criteria. Developers can use this method to retrieve Player assets by player, game/project or other properties.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="assetId">Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc. (optional)</param>
        /// <param name="playerId">Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc. (optional)</param>
        /// <param name="sort">Player asset field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="limit">Number of player assets to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PlayerAsset&gt;</returns>
        List<PlayerAsset> PlayerAssetControllerPlayerAssets(string authorization, string projectId, string assetId = default(string), string playerId = default(string), string sort = default(string), string order = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// Retrieve player assets
        /// </summary>
        /// <remarks>
        /// This API method retrieves a list of Player assets that match the specified filter criteria. Developers can use this method to retrieve Player assets by player, game/project or other properties.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="assetId">Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc. (optional)</param>
        /// <param name="playerId">Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc. (optional)</param>
        /// <param name="sort">Player asset field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="limit">Number of player assets to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PlayerAsset&gt;</returns>
        ApiResponse<List<PlayerAsset>> PlayerAssetControllerPlayerAssetsWithHttpInfo(string authorization, string projectId, string assetId = default(string), string playerId = default(string), string sort = default(string), string order = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// Update an existing Player
        /// </summary>
        /// <remarks>
        /// This API method allows developers to update an existing Player by providing the ID of the Player and the updated properties and associated assets.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Player</returns>
        Player UpdatePlayer(string authorization, int operationIndex = 0);

        /// <summary>
        /// Update an existing Player
        /// </summary>
        /// <remarks>
        /// This API method allows developers to update an existing Player by providing the ID of the Player and the updated properties and associated assets.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Player</returns>
        ApiResponse<Player> UpdatePlayerWithHttpInfo(string authorization, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlayerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Count players
        /// </summary>
        /// <remarks>
        /// Count players in game. Example: count players in game Call of Duty.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of decimal</returns>
        System.Threading.Tasks.Task<decimal> CountPlayersByGameIdAsync(string authorization, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Count players
        /// </summary>
        /// <remarks>
        /// Count players in game. Example: count players in game Call of Duty.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (decimal)</returns>
        System.Threading.Tasks.Task<ApiResponse<decimal>> CountPlayersByGameIdWithHttpInfoAsync(string authorization, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create new player
        /// </summary>
        /// <remarks>
        /// Create new player for game/project. Example: Create new player Jack in game Call of Duty.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="createPlayerDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Player</returns>
        System.Threading.Tasks.Task<Player> CreatePlayerAsync(string authorization, CreatePlayerDto createPlayerDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create new player
        /// </summary>
        /// <remarks>
        /// Create new player for game/project. Example: Create new player Jack in game Call of Duty.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="createPlayerDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Player)</returns>
        System.Threading.Tasks.Task<ApiResponse<Player>> CreatePlayerWithHttpInfoAsync(string authorization, CreatePlayerDto createPlayerDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve player by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific player by ID associated with game/project. Example: retrieve player Jack from game Call of Duty.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="id">Player ID that you created in your game/project. Example: Jack, George, etc.</param>
        /// <param name="projectId">Game/project ID to find asset in. Example: Call of Duty, Fortnite, etc.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Player</returns>
        System.Threading.Tasks.Task<Player> GetPlayerByIdAsync(string authorization, string id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve player by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific player by ID associated with game/project. Example: retrieve player Jack from game Call of Duty.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="id">Player ID that you created in your game/project. Example: Jack, George, etc.</param>
        /// <param name="projectId">Game/project ID to find asset in. Example: Call of Duty, Fortnite, etc.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Player)</returns>
        System.Threading.Tasks.Task<ApiResponse<Player>> GetPlayerByIdWithHttpInfoAsync(string authorization, string id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve players
        /// </summary>
        /// <remarks>
        /// Retrieve a list of players that match the specified filter criteria. Developers can use this method to retrieve players by name, category, status, or other properties. Example: Retrieve players from game Call of Duty.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to find player in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="sort">Player field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search player by name (optional)</param>
        /// <param name="limit">Number of players to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Player&gt;</returns>
        System.Threading.Tasks.Task<List<Player>> GetPlayersAsync(string authorization, string projectId, string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve players
        /// </summary>
        /// <remarks>
        /// Retrieve a list of players that match the specified filter criteria. Developers can use this method to retrieve players by name, category, status, or other properties. Example: Retrieve players from game Call of Duty.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to find player in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="sort">Player field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search player by name (optional)</param>
        /// <param name="limit">Number of players to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Player&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Player>>> GetPlayersWithHttpInfoAsync(string authorization, string projectId, string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve player asset by ID
        /// </summary>
        /// <remarks>
        /// Retrieve player asset by ID. Player asset represents a single asset that a player owns. It has amount field that represents how many of this asset player owns.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="id"></param>
        /// <param name="projectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayerAsset</returns>
        System.Threading.Tasks.Task<PlayerAsset> PlayerAssetControllerPlayerAssetByIdAsync(string authorization, string id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve player asset by ID
        /// </summary>
        /// <remarks>
        /// Retrieve player asset by ID. Player asset represents a single asset that a player owns. It has amount field that represents how many of this asset player owns.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="id"></param>
        /// <param name="projectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerAsset)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlayerAsset>> PlayerAssetControllerPlayerAssetByIdWithHttpInfoAsync(string authorization, string id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve player assets
        /// </summary>
        /// <remarks>
        /// This API method retrieves a list of Player assets that match the specified filter criteria. Developers can use this method to retrieve Player assets by player, game/project or other properties.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="assetId">Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc. (optional)</param>
        /// <param name="playerId">Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc. (optional)</param>
        /// <param name="sort">Player asset field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="limit">Number of player assets to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PlayerAsset&gt;</returns>
        System.Threading.Tasks.Task<List<PlayerAsset>> PlayerAssetControllerPlayerAssetsAsync(string authorization, string projectId, string assetId = default(string), string playerId = default(string), string sort = default(string), string order = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve player assets
        /// </summary>
        /// <remarks>
        /// This API method retrieves a list of Player assets that match the specified filter criteria. Developers can use this method to retrieve Player assets by player, game/project or other properties.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="assetId">Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc. (optional)</param>
        /// <param name="playerId">Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc. (optional)</param>
        /// <param name="sort">Player asset field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="limit">Number of player assets to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PlayerAsset&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PlayerAsset>>> PlayerAssetControllerPlayerAssetsWithHttpInfoAsync(string authorization, string projectId, string assetId = default(string), string playerId = default(string), string sort = default(string), string order = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an existing Player
        /// </summary>
        /// <remarks>
        /// This API method allows developers to update an existing Player by providing the ID of the Player and the updated properties and associated assets.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Player</returns>
        System.Threading.Tasks.Task<Player> UpdatePlayerAsync(string authorization, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an existing Player
        /// </summary>
        /// <remarks>
        /// This API method allows developers to update an existing Player by providing the ID of the Player and the updated properties and associated assets.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Player)</returns>
        System.Threading.Tasks.Task<ApiResponse<Player>> UpdatePlayerWithHttpInfoAsync(string authorization, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlayerApi : IPlayerApiSync, IPlayerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlayerApi : IPlayerApi
    {
        private L3vels.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlayerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlayerApi(string basePath)
        {
            this.Configuration = L3vels.Sdk.Client.Configuration.MergeConfigurations(
                L3vels.Sdk.Client.GlobalConfiguration.Instance,
                new L3vels.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new L3vels.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new L3vels.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = L3vels.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlayerApi(L3vels.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = L3vels.Sdk.Client.Configuration.MergeConfigurations(
                L3vels.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new L3vels.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new L3vels.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = L3vels.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PlayerApi(L3vels.Sdk.Client.ISynchronousClient client, L3vels.Sdk.Client.IAsynchronousClient asyncClient, L3vels.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = L3vels.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public L3vels.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public L3vels.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public L3vels.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public L3vels.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Count players Count players in game. Example: count players in game Call of Duty.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>decimal</returns>
        public decimal CountPlayersByGameId(string authorization, string projectId, int operationIndex = 0)
        {
            L3vels.Sdk.Client.ApiResponse<decimal> localVarResponse = CountPlayersByGameIdWithHttpInfo(authorization, projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Count players Count players in game. Example: count players in game Call of Duty.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of decimal</returns>
        public L3vels.Sdk.Client.ApiResponse<decimal> CountPlayersByGameIdWithHttpInfo(string authorization, string projectId, int operationIndex = 0)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling PlayerApi->CountPlayersByGameId");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling PlayerApi->CountPlayersByGameId");
            }

            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", L3vels.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "PlayerApi.CountPlayersByGameId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<decimal>("/v1/player/count/{project_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountPlayersByGameId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Count players Count players in game. Example: count players in game Call of Duty.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of decimal</returns>
        public async System.Threading.Tasks.Task<decimal> CountPlayersByGameIdAsync(string authorization, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            L3vels.Sdk.Client.ApiResponse<decimal> localVarResponse = await CountPlayersByGameIdWithHttpInfoAsync(authorization, projectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Count players Count players in game. Example: count players in game Call of Duty.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (decimal)</returns>
        public async System.Threading.Tasks.Task<L3vels.Sdk.Client.ApiResponse<decimal>> CountPlayersByGameIdWithHttpInfoAsync(string authorization, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling PlayerApi->CountPlayersByGameId");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling PlayerApi->CountPlayersByGameId");
            }


            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", L3vels.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "PlayerApi.CountPlayersByGameId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<decimal>("/v1/player/count/{project_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountPlayersByGameId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new player Create new player for game/project. Example: Create new player Jack in game Call of Duty.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="createPlayerDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Player</returns>
        public Player CreatePlayer(string authorization, CreatePlayerDto createPlayerDto, int operationIndex = 0)
        {
            L3vels.Sdk.Client.ApiResponse<Player> localVarResponse = CreatePlayerWithHttpInfo(authorization, createPlayerDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new player Create new player for game/project. Example: Create new player Jack in game Call of Duty.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="createPlayerDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Player</returns>
        public L3vels.Sdk.Client.ApiResponse<Player> CreatePlayerWithHttpInfo(string authorization, CreatePlayerDto createPlayerDto, int operationIndex = 0)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling PlayerApi->CreatePlayer");
            }

            // verify the required parameter 'createPlayerDto' is set
            if (createPlayerDto == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'createPlayerDto' when calling PlayerApi->CreatePlayer");
            }

            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = createPlayerDto;

            localVarRequestOptions.Operation = "PlayerApi.CreatePlayer";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Player>("/v1/player", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePlayer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new player Create new player for game/project. Example: Create new player Jack in game Call of Duty.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="createPlayerDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Player</returns>
        public async System.Threading.Tasks.Task<Player> CreatePlayerAsync(string authorization, CreatePlayerDto createPlayerDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            L3vels.Sdk.Client.ApiResponse<Player> localVarResponse = await CreatePlayerWithHttpInfoAsync(authorization, createPlayerDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new player Create new player for game/project. Example: Create new player Jack in game Call of Duty.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="createPlayerDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Player)</returns>
        public async System.Threading.Tasks.Task<L3vels.Sdk.Client.ApiResponse<Player>> CreatePlayerWithHttpInfoAsync(string authorization, CreatePlayerDto createPlayerDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling PlayerApi->CreatePlayer");
            }

            // verify the required parameter 'createPlayerDto' is set
            if (createPlayerDto == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'createPlayerDto' when calling PlayerApi->CreatePlayer");
            }


            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            localVarRequestOptions.Data = createPlayerDto;

            localVarRequestOptions.Operation = "PlayerApi.CreatePlayer";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Player>("/v1/player", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePlayer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve player by ID Retrieves a specific player by ID associated with game/project. Example: retrieve player Jack from game Call of Duty.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="id">Player ID that you created in your game/project. Example: Jack, George, etc.</param>
        /// <param name="projectId">Game/project ID to find asset in. Example: Call of Duty, Fortnite, etc.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Player</returns>
        public Player GetPlayerById(string authorization, string id, string projectId, int operationIndex = 0)
        {
            L3vels.Sdk.Client.ApiResponse<Player> localVarResponse = GetPlayerByIdWithHttpInfo(authorization, id, projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve player by ID Retrieves a specific player by ID associated with game/project. Example: retrieve player Jack from game Call of Duty.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="id">Player ID that you created in your game/project. Example: Jack, George, etc.</param>
        /// <param name="projectId">Game/project ID to find asset in. Example: Call of Duty, Fortnite, etc.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Player</returns>
        public L3vels.Sdk.Client.ApiResponse<Player> GetPlayerByIdWithHttpInfo(string authorization, string id, string projectId, int operationIndex = 0)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling PlayerApi->GetPlayerById");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling PlayerApi->GetPlayerById");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling PlayerApi->GetPlayerById");
            }

            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", L3vels.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", L3vels.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "PlayerApi.GetPlayerById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Player>("/v1/player/{project_id}/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayerById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve player by ID Retrieves a specific player by ID associated with game/project. Example: retrieve player Jack from game Call of Duty.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="id">Player ID that you created in your game/project. Example: Jack, George, etc.</param>
        /// <param name="projectId">Game/project ID to find asset in. Example: Call of Duty, Fortnite, etc.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Player</returns>
        public async System.Threading.Tasks.Task<Player> GetPlayerByIdAsync(string authorization, string id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            L3vels.Sdk.Client.ApiResponse<Player> localVarResponse = await GetPlayerByIdWithHttpInfoAsync(authorization, id, projectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve player by ID Retrieves a specific player by ID associated with game/project. Example: retrieve player Jack from game Call of Duty.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="id">Player ID that you created in your game/project. Example: Jack, George, etc.</param>
        /// <param name="projectId">Game/project ID to find asset in. Example: Call of Duty, Fortnite, etc.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Player)</returns>
        public async System.Threading.Tasks.Task<L3vels.Sdk.Client.ApiResponse<Player>> GetPlayerByIdWithHttpInfoAsync(string authorization, string id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling PlayerApi->GetPlayerById");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling PlayerApi->GetPlayerById");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling PlayerApi->GetPlayerById");
            }


            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", L3vels.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", L3vels.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "PlayerApi.GetPlayerById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Player>("/v1/player/{project_id}/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayerById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve players Retrieve a list of players that match the specified filter criteria. Developers can use this method to retrieve players by name, category, status, or other properties. Example: Retrieve players from game Call of Duty.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to find player in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="sort">Player field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search player by name (optional)</param>
        /// <param name="limit">Number of players to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Player&gt;</returns>
        public List<Player> GetPlayers(string authorization, string projectId, string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0)
        {
            L3vels.Sdk.Client.ApiResponse<List<Player>> localVarResponse = GetPlayersWithHttpInfo(authorization, projectId, sort, order, searchText, limit, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve players Retrieve a list of players that match the specified filter criteria. Developers can use this method to retrieve players by name, category, status, or other properties. Example: Retrieve players from game Call of Duty.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to find player in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="sort">Player field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search player by name (optional)</param>
        /// <param name="limit">Number of players to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Player&gt;</returns>
        public L3vels.Sdk.Client.ApiResponse<List<Player>> GetPlayersWithHttpInfo(string authorization, string projectId, string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling PlayerApi->GetPlayers");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling PlayerApi->GetPlayers");
            }

            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "project_id", projectId));
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "search_text", searchText));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "PlayerApi.GetPlayers";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Player>>("/v1/player", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve players Retrieve a list of players that match the specified filter criteria. Developers can use this method to retrieve players by name, category, status, or other properties. Example: Retrieve players from game Call of Duty.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to find player in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="sort">Player field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search player by name (optional)</param>
        /// <param name="limit">Number of players to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Player&gt;</returns>
        public async System.Threading.Tasks.Task<List<Player>> GetPlayersAsync(string authorization, string projectId, string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            L3vels.Sdk.Client.ApiResponse<List<Player>> localVarResponse = await GetPlayersWithHttpInfoAsync(authorization, projectId, sort, order, searchText, limit, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve players Retrieve a list of players that match the specified filter criteria. Developers can use this method to retrieve players by name, category, status, or other properties. Example: Retrieve players from game Call of Duty.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to find player in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="sort">Player field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search player by name (optional)</param>
        /// <param name="limit">Number of players to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Player&gt;)</returns>
        public async System.Threading.Tasks.Task<L3vels.Sdk.Client.ApiResponse<List<Player>>> GetPlayersWithHttpInfoAsync(string authorization, string projectId, string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling PlayerApi->GetPlayers");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling PlayerApi->GetPlayers");
            }


            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "project_id", projectId));
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "search_text", searchText));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "PlayerApi.GetPlayers";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Player>>("/v1/player", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve player asset by ID Retrieve player asset by ID. Player asset represents a single asset that a player owns. It has amount field that represents how many of this asset player owns.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="id"></param>
        /// <param name="projectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlayerAsset</returns>
        public PlayerAsset PlayerAssetControllerPlayerAssetById(string authorization, string id, string projectId, int operationIndex = 0)
        {
            L3vels.Sdk.Client.ApiResponse<PlayerAsset> localVarResponse = PlayerAssetControllerPlayerAssetByIdWithHttpInfo(authorization, id, projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve player asset by ID Retrieve player asset by ID. Player asset represents a single asset that a player owns. It has amount field that represents how many of this asset player owns.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="id"></param>
        /// <param name="projectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlayerAsset</returns>
        public L3vels.Sdk.Client.ApiResponse<PlayerAsset> PlayerAssetControllerPlayerAssetByIdWithHttpInfo(string authorization, string id, string projectId, int operationIndex = 0)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling PlayerApi->PlayerAssetControllerPlayerAssetById");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling PlayerApi->PlayerAssetControllerPlayerAssetById");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling PlayerApi->PlayerAssetControllerPlayerAssetById");
            }

            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", L3vels.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", L3vels.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "PlayerApi.PlayerAssetControllerPlayerAssetById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PlayerAsset>("/v1/player-asset/{project_id}/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlayerAssetControllerPlayerAssetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve player asset by ID Retrieve player asset by ID. Player asset represents a single asset that a player owns. It has amount field that represents how many of this asset player owns.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="id"></param>
        /// <param name="projectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayerAsset</returns>
        public async System.Threading.Tasks.Task<PlayerAsset> PlayerAssetControllerPlayerAssetByIdAsync(string authorization, string id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            L3vels.Sdk.Client.ApiResponse<PlayerAsset> localVarResponse = await PlayerAssetControllerPlayerAssetByIdWithHttpInfoAsync(authorization, id, projectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve player asset by ID Retrieve player asset by ID. Player asset represents a single asset that a player owns. It has amount field that represents how many of this asset player owns.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="id"></param>
        /// <param name="projectId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerAsset)</returns>
        public async System.Threading.Tasks.Task<L3vels.Sdk.Client.ApiResponse<PlayerAsset>> PlayerAssetControllerPlayerAssetByIdWithHttpInfoAsync(string authorization, string id, string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling PlayerApi->PlayerAssetControllerPlayerAssetById");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling PlayerApi->PlayerAssetControllerPlayerAssetById");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling PlayerApi->PlayerAssetControllerPlayerAssetById");
            }


            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", L3vels.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("project_id", L3vels.Sdk.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "PlayerApi.PlayerAssetControllerPlayerAssetById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PlayerAsset>("/v1/player-asset/{project_id}/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlayerAssetControllerPlayerAssetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve player assets This API method retrieves a list of Player assets that match the specified filter criteria. Developers can use this method to retrieve Player assets by player, game/project or other properties.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="assetId">Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc. (optional)</param>
        /// <param name="playerId">Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc. (optional)</param>
        /// <param name="sort">Player asset field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="limit">Number of player assets to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PlayerAsset&gt;</returns>
        public List<PlayerAsset> PlayerAssetControllerPlayerAssets(string authorization, string projectId, string assetId = default(string), string playerId = default(string), string sort = default(string), string order = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0)
        {
            L3vels.Sdk.Client.ApiResponse<List<PlayerAsset>> localVarResponse = PlayerAssetControllerPlayerAssetsWithHttpInfo(authorization, projectId, assetId, playerId, sort, order, limit, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve player assets This API method retrieves a list of Player assets that match the specified filter criteria. Developers can use this method to retrieve Player assets by player, game/project or other properties.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="assetId">Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc. (optional)</param>
        /// <param name="playerId">Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc. (optional)</param>
        /// <param name="sort">Player asset field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="limit">Number of player assets to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PlayerAsset&gt;</returns>
        public L3vels.Sdk.Client.ApiResponse<List<PlayerAsset>> PlayerAssetControllerPlayerAssetsWithHttpInfo(string authorization, string projectId, string assetId = default(string), string playerId = default(string), string sort = default(string), string order = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling PlayerApi->PlayerAssetControllerPlayerAssets");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling PlayerApi->PlayerAssetControllerPlayerAssets");
            }

            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "project_id", projectId));
            if (assetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "asset_id", assetId));
            }
            if (playerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "player_id", playerId));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "PlayerApi.PlayerAssetControllerPlayerAssets";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PlayerAsset>>("/v1/player-asset", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlayerAssetControllerPlayerAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve player assets This API method retrieves a list of Player assets that match the specified filter criteria. Developers can use this method to retrieve Player assets by player, game/project or other properties.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="assetId">Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc. (optional)</param>
        /// <param name="playerId">Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc. (optional)</param>
        /// <param name="sort">Player asset field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="limit">Number of player assets to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PlayerAsset&gt;</returns>
        public async System.Threading.Tasks.Task<List<PlayerAsset>> PlayerAssetControllerPlayerAssetsAsync(string authorization, string projectId, string assetId = default(string), string playerId = default(string), string sort = default(string), string order = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            L3vels.Sdk.Client.ApiResponse<List<PlayerAsset>> localVarResponse = await PlayerAssetControllerPlayerAssetsWithHttpInfoAsync(authorization, projectId, assetId, playerId, sort, order, limit, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve player assets This API method retrieves a list of Player assets that match the specified filter criteria. Developers can use this method to retrieve Player assets by player, game/project or other properties.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="projectId">Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="assetId">Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc. (optional)</param>
        /// <param name="playerId">Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc. (optional)</param>
        /// <param name="sort">Player asset field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="limit">Number of player assets to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PlayerAsset&gt;)</returns>
        public async System.Threading.Tasks.Task<L3vels.Sdk.Client.ApiResponse<List<PlayerAsset>>> PlayerAssetControllerPlayerAssetsWithHttpInfoAsync(string authorization, string projectId, string assetId = default(string), string playerId = default(string), string sort = default(string), string order = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling PlayerApi->PlayerAssetControllerPlayerAssets");
            }

            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'projectId' when calling PlayerApi->PlayerAssetControllerPlayerAssets");
            }


            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "project_id", projectId));
            if (assetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "asset_id", assetId));
            }
            if (playerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "player_id", playerId));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "PlayerApi.PlayerAssetControllerPlayerAssets";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PlayerAsset>>("/v1/player-asset", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlayerAssetControllerPlayerAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing Player This API method allows developers to update an existing Player by providing the ID of the Player and the updated properties and associated assets.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Player</returns>
        public Player UpdatePlayer(string authorization, int operationIndex = 0)
        {
            L3vels.Sdk.Client.ApiResponse<Player> localVarResponse = UpdatePlayerWithHttpInfo(authorization);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing Player This API method allows developers to update an existing Player by providing the ID of the Player and the updated properties and associated assets.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Player</returns>
        public L3vels.Sdk.Client.ApiResponse<Player> UpdatePlayerWithHttpInfo(string authorization, int operationIndex = 0)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling PlayerApi->UpdatePlayer");
            }

            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "PlayerApi.UpdatePlayer";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Player>("/v1/player", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePlayer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing Player This API method allows developers to update an existing Player by providing the ID of the Player and the updated properties and associated assets.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Player</returns>
        public async System.Threading.Tasks.Task<Player> UpdatePlayerAsync(string authorization, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            L3vels.Sdk.Client.ApiResponse<Player> localVarResponse = await UpdatePlayerWithHttpInfoAsync(authorization, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing Player This API method allows developers to update an existing Player by providing the ID of the Player and the updated properties and associated assets.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple projects. Please include it in to use developers API.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Player)</returns>
        public async System.Threading.Tasks.Task<L3vels.Sdk.Client.ApiResponse<Player>> UpdatePlayerWithHttpInfoAsync(string authorization, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling PlayerApi->UpdatePlayer");
            }


            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "PlayerApi.UpdatePlayer";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Player>("/v1/player", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePlayer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
