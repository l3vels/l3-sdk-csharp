/*
 * L3vels Api
 *
 * L3vels API for Game developers
 *
 * The version of the OpenAPI document: 0.3
 * Contact: support@l3vels.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using L3vels.Sdk.Client;
using L3vels.Sdk.Model;

namespace L3vels.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve Transaction by ID
        /// </summary>
        /// <remarks>
        /// Retrieve transaction by ID
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="id"></param>
        /// <param name="gameId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Transaction</returns>
        Transaction GetTransactionById(string authorization, string id, string gameId, int operationIndex = 0);

        /// <summary>
        /// Retrieve Transaction by ID
        /// </summary>
        /// <remarks>
        /// Retrieve transaction by ID
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="id"></param>
        /// <param name="gameId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Transaction</returns>
        ApiResponse<Transaction> GetTransactionByIdWithHttpInfo(string authorization, string id, string gameId, int operationIndex = 0);
        /// <summary>
        /// Retrieve transactions
        /// </summary>
        /// <remarks>
        /// Retrieve all transactions.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID to find transactions in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="collectionId">Filter transactions by collection. Example: Get transactions only from Weapons collection. (optional)</param>
        /// <param name="playerId">Player ID to mint to. You can provide player ID or player address (optional)</param>
        /// <param name="sort">Asset field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search transactions by name (optional)</param>
        /// <param name="limit">Number of transactions to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Transaction</returns>
        Transaction GetTransactions(string authorization, string gameId, string collectionId = default(string), string playerId = default(string), string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// Retrieve transactions
        /// </summary>
        /// <remarks>
        /// Retrieve all transactions.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID to find transactions in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="collectionId">Filter transactions by collection. Example: Get transactions only from Weapons collection. (optional)</param>
        /// <param name="playerId">Player ID to mint to. You can provide player ID or player address (optional)</param>
        /// <param name="sort">Asset field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search transactions by name (optional)</param>
        /// <param name="limit">Number of transactions to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Transaction</returns>
        ApiResponse<Transaction> GetTransactionsWithHttpInfo(string authorization, string gameId, string collectionId = default(string), string playerId = default(string), string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve Transaction by ID
        /// </summary>
        /// <remarks>
        /// Retrieve transaction by ID
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="id"></param>
        /// <param name="gameId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Transaction</returns>
        System.Threading.Tasks.Task<Transaction> GetTransactionByIdAsync(string authorization, string id, string gameId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Transaction by ID
        /// </summary>
        /// <remarks>
        /// Retrieve transaction by ID
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="id"></param>
        /// <param name="gameId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<Transaction>> GetTransactionByIdWithHttpInfoAsync(string authorization, string id, string gameId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve transactions
        /// </summary>
        /// <remarks>
        /// Retrieve all transactions.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID to find transactions in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="collectionId">Filter transactions by collection. Example: Get transactions only from Weapons collection. (optional)</param>
        /// <param name="playerId">Player ID to mint to. You can provide player ID or player address (optional)</param>
        /// <param name="sort">Asset field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search transactions by name (optional)</param>
        /// <param name="limit">Number of transactions to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Transaction</returns>
        System.Threading.Tasks.Task<Transaction> GetTransactionsAsync(string authorization, string gameId, string collectionId = default(string), string playerId = default(string), string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve transactions
        /// </summary>
        /// <remarks>
        /// Retrieve all transactions.
        /// </remarks>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID to find transactions in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="collectionId">Filter transactions by collection. Example: Get transactions only from Weapons collection. (optional)</param>
        /// <param name="playerId">Player ID to mint to. You can provide player ID or player address (optional)</param>
        /// <param name="sort">Asset field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search transactions by name (optional)</param>
        /// <param name="limit">Number of transactions to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<Transaction>> GetTransactionsWithHttpInfoAsync(string authorization, string gameId, string collectionId = default(string), string playerId = default(string), string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionApi : ITransactionApiSync, ITransactionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransactionApi : ITransactionApi
    {
        private L3vels.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionApi(string basePath)
        {
            this.Configuration = L3vels.Sdk.Client.Configuration.MergeConfigurations(
                L3vels.Sdk.Client.GlobalConfiguration.Instance,
                new L3vels.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new L3vels.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new L3vels.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = L3vels.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransactionApi(L3vels.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = L3vels.Sdk.Client.Configuration.MergeConfigurations(
                L3vels.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new L3vels.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new L3vels.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = L3vels.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TransactionApi(L3vels.Sdk.Client.ISynchronousClient client, L3vels.Sdk.Client.IAsynchronousClient asyncClient, L3vels.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = L3vels.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public L3vels.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public L3vels.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public L3vels.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public L3vels.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve Transaction by ID Retrieve transaction by ID
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="id"></param>
        /// <param name="gameId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Transaction</returns>
        public Transaction GetTransactionById(string authorization, string id, string gameId, int operationIndex = 0)
        {
            L3vels.Sdk.Client.ApiResponse<Transaction> localVarResponse = GetTransactionByIdWithHttpInfo(authorization, id, gameId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Transaction by ID Retrieve transaction by ID
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="id"></param>
        /// <param name="gameId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Transaction</returns>
        public L3vels.Sdk.Client.ApiResponse<Transaction> GetTransactionByIdWithHttpInfo(string authorization, string id, string gameId, int operationIndex = 0)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling TransactionApi->GetTransactionById");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling TransactionApi->GetTransactionById");
            }

            // verify the required parameter 'gameId' is set
            if (gameId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'gameId' when calling TransactionApi->GetTransactionById");
            }

            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", L3vels.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("game_id", L3vels.Sdk.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "TransactionApi.GetTransactionById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Transaction>("/v1/transaction/{game_id}/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactionById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Transaction by ID Retrieve transaction by ID
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="id"></param>
        /// <param name="gameId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Transaction</returns>
        public async System.Threading.Tasks.Task<Transaction> GetTransactionByIdAsync(string authorization, string id, string gameId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            L3vels.Sdk.Client.ApiResponse<Transaction> localVarResponse = await GetTransactionByIdWithHttpInfoAsync(authorization, id, gameId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Transaction by ID Retrieve transaction by ID
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="id"></param>
        /// <param name="gameId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        public async System.Threading.Tasks.Task<L3vels.Sdk.Client.ApiResponse<Transaction>> GetTransactionByIdWithHttpInfoAsync(string authorization, string id, string gameId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling TransactionApi->GetTransactionById");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling TransactionApi->GetTransactionById");
            }

            // verify the required parameter 'gameId' is set
            if (gameId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'gameId' when calling TransactionApi->GetTransactionById");
            }


            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", L3vels.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("game_id", L3vels.Sdk.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "TransactionApi.GetTransactionById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Transaction>("/v1/transaction/{game_id}/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactionById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve transactions Retrieve all transactions.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID to find transactions in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="collectionId">Filter transactions by collection. Example: Get transactions only from Weapons collection. (optional)</param>
        /// <param name="playerId">Player ID to mint to. You can provide player ID or player address (optional)</param>
        /// <param name="sort">Asset field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search transactions by name (optional)</param>
        /// <param name="limit">Number of transactions to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Transaction</returns>
        public Transaction GetTransactions(string authorization, string gameId, string collectionId = default(string), string playerId = default(string), string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0)
        {
            L3vels.Sdk.Client.ApiResponse<Transaction> localVarResponse = GetTransactionsWithHttpInfo(authorization, gameId, collectionId, playerId, sort, order, searchText, limit, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve transactions Retrieve all transactions.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID to find transactions in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="collectionId">Filter transactions by collection. Example: Get transactions only from Weapons collection. (optional)</param>
        /// <param name="playerId">Player ID to mint to. You can provide player ID or player address (optional)</param>
        /// <param name="sort">Asset field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search transactions by name (optional)</param>
        /// <param name="limit">Number of transactions to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Transaction</returns>
        public L3vels.Sdk.Client.ApiResponse<Transaction> GetTransactionsWithHttpInfo(string authorization, string gameId, string collectionId = default(string), string playerId = default(string), string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling TransactionApi->GetTransactions");
            }

            // verify the required parameter 'gameId' is set
            if (gameId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'gameId' when calling TransactionApi->GetTransactions");
            }

            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "game_id", gameId));
            if (collectionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "collection_id", collectionId));
            }
            if (playerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "player_id", playerId));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "search_text", searchText));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "TransactionApi.GetTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Transaction>("/v1/transaction", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve transactions Retrieve all transactions.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID to find transactions in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="collectionId">Filter transactions by collection. Example: Get transactions only from Weapons collection. (optional)</param>
        /// <param name="playerId">Player ID to mint to. You can provide player ID or player address (optional)</param>
        /// <param name="sort">Asset field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search transactions by name (optional)</param>
        /// <param name="limit">Number of transactions to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Transaction</returns>
        public async System.Threading.Tasks.Task<Transaction> GetTransactionsAsync(string authorization, string gameId, string collectionId = default(string), string playerId = default(string), string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            L3vels.Sdk.Client.ApiResponse<Transaction> localVarResponse = await GetTransactionsWithHttpInfoAsync(authorization, gameId, collectionId, playerId, sort, order, searchText, limit, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve transactions Retrieve all transactions.
        /// </summary>
        /// <exception cref="L3vels.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">API key is associated with multiple games. Please include it in to use developers API.</param>
        /// <param name="gameId">Game ID to find transactions in your game. Example: Fortnite, Minecraft, etc.</param>
        /// <param name="collectionId">Filter transactions by collection. Example: Get transactions only from Weapons collection. (optional)</param>
        /// <param name="playerId">Player ID to mint to. You can provide player ID or player address (optional)</param>
        /// <param name="sort">Asset field to sort by. You can sort by name, created_on and etc. (optional)</param>
        /// <param name="order">Sort order (ASC for ascending or DESC for descending) (optional)</param>
        /// <param name="searchText">Search transactions by name (optional)</param>
        /// <param name="limit">Number of transactions to return per page (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        public async System.Threading.Tasks.Task<L3vels.Sdk.Client.ApiResponse<Transaction>> GetTransactionsWithHttpInfoAsync(string authorization, string gameId, string collectionId = default(string), string playerId = default(string), string sort = default(string), string order = default(string), string searchText = default(string), decimal? limit = default(decimal?), decimal? page = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'authorization' when calling TransactionApi->GetTransactions");
            }

            // verify the required parameter 'gameId' is set
            if (gameId == null)
            {
                throw new L3vels.Sdk.Client.ApiException(400, "Missing required parameter 'gameId' when calling TransactionApi->GetTransactions");
            }


            L3vels.Sdk.Client.RequestOptions localVarRequestOptions = new L3vels.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = L3vels.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = L3vels.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "game_id", gameId));
            if (collectionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "collection_id", collectionId));
            }
            if (playerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "player_id", playerId));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (searchText != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "search_text", searchText));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(L3vels.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            localVarRequestOptions.HeaderParameters.Add("Authorization", L3vels.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter

            localVarRequestOptions.Operation = "TransactionApi.GetTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Transaction>("/v1/transaction", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
