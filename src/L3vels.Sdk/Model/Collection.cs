/*
 * L3vels Api
 *
 * L3vels API for Game developers
 *
 * The version of the OpenAPI document: 0.3
 * Contact: support@l3vels.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = L3vels.Sdk.Client.OpenAPIDateConverter;

namespace L3vels.Sdk.Model
{
    /// <summary>
    /// Collection
    /// </summary>
    [DataContract(Name = "Collection")]
    public partial class Collection : IEquatable<Collection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Collection" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Collection() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Collection" /> class.
        /// </summary>
        /// <param name="id">The unique identifier for the collection entity. (required).</param>
        /// <param name="uniqueId">The unique identifier that can be provided by game studio. (required).</param>
        /// <param name="name">The name of the collection. (required).</param>
        /// <param name="description">A brief description of the collection. (required).</param>
        /// <param name="logoImage">An image representing the collection&#39;s logo. (required).</param>
        /// <param name="medias">Additional images associated with the collection, such as screenshots or promotional images. (required).</param>
        /// <param name="mainMedia">The main or featured image associated with the game. You can set it from the dashboard as main image. (required).</param>
        /// <param name="url">A unique URL for the collection on the L3vels platform. (required).</param>
        /// <param name="webLink">A URL link to the collection&#39;s webpage. (required).</param>
        /// <param name="supply">The supply represents the number of assets that are available within the Collection. (required).</param>
        /// <param name="customPropertyProps">Custom properties that are unique to the collection and defined by the developer to categorize and filter them. (required).</param>
        /// <param name="socialLinks">Additional social links associated with the collection (required).</param>
        /// <param name="customAssetProps">Custom assets fields associated with the collection. (required).</param>
        /// <param name="categories">The category or categories that the collection belongs to. (required).</param>
        /// <param name="status">The current status of the collection. Possible values are: Draft, Active (required).</param>
        /// <param name="accountId">The unique identifier of the account that the Collection belongs to. (required).</param>
        /// <param name="projectId">The unique identifier of the project that the collection is associated with. This allows developers to organize their collections by project and helps with tracking and reporting. (required).</param>
        /// <param name="createdOn">The date when the collection was created. (required).</param>
        /// <param name="modifiedOn">The date when the collection was last modified. (required).</param>
        /// <param name="createdBy">The Id of the user who created the collection. (required).</param>
        /// <param name="modifiedBy">The Id of the user who last modified the collection. (required).</param>
        public Collection(string id = default(string), string uniqueId = default(string), string name = default(string), string description = default(string), string logoImage = default(string), List<string> medias = default(List<string>), string mainMedia = default(string), string url = default(string), string webLink = default(string), decimal supply = default(decimal), Object customPropertyProps = default(Object), List<string> socialLinks = default(List<string>), Object customAssetProps = default(Object), Object categories = default(Object), string status = default(string), decimal accountId = default(decimal), string projectId = default(string), DateTimeOffset createdOn = default(DateTimeOffset), DateTimeOffset modifiedOn = default(DateTimeOffset), decimal createdBy = default(decimal), decimal modifiedBy = default(decimal))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Collection and cannot be null");
            }
            this.Id = id;
            // to ensure "uniqueId" is required (not null)
            if (uniqueId == null)
            {
                throw new ArgumentNullException("uniqueId is a required property for Collection and cannot be null");
            }
            this.UniqueId = uniqueId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Collection and cannot be null");
            }
            this.Name = name;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for Collection and cannot be null");
            }
            this.Description = description;
            // to ensure "logoImage" is required (not null)
            if (logoImage == null)
            {
                throw new ArgumentNullException("logoImage is a required property for Collection and cannot be null");
            }
            this.LogoImage = logoImage;
            // to ensure "medias" is required (not null)
            if (medias == null)
            {
                throw new ArgumentNullException("medias is a required property for Collection and cannot be null");
            }
            this.Medias = medias;
            // to ensure "mainMedia" is required (not null)
            if (mainMedia == null)
            {
                throw new ArgumentNullException("mainMedia is a required property for Collection and cannot be null");
            }
            this.MainMedia = mainMedia;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for Collection and cannot be null");
            }
            this.Url = url;
            // to ensure "webLink" is required (not null)
            if (webLink == null)
            {
                throw new ArgumentNullException("webLink is a required property for Collection and cannot be null");
            }
            this.WebLink = webLink;
            this.Supply = supply;
            // to ensure "customPropertyProps" is required (not null)
            if (customPropertyProps == null)
            {
                throw new ArgumentNullException("customPropertyProps is a required property for Collection and cannot be null");
            }
            this.CustomPropertyProps = customPropertyProps;
            // to ensure "socialLinks" is required (not null)
            if (socialLinks == null)
            {
                throw new ArgumentNullException("socialLinks is a required property for Collection and cannot be null");
            }
            this.SocialLinks = socialLinks;
            // to ensure "customAssetProps" is required (not null)
            if (customAssetProps == null)
            {
                throw new ArgumentNullException("customAssetProps is a required property for Collection and cannot be null");
            }
            this.CustomAssetProps = customAssetProps;
            // to ensure "categories" is required (not null)
            if (categories == null)
            {
                throw new ArgumentNullException("categories is a required property for Collection and cannot be null");
            }
            this.Categories = categories;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for Collection and cannot be null");
            }
            this.Status = status;
            this.AccountId = accountId;
            // to ensure "projectId" is required (not null)
            if (projectId == null)
            {
                throw new ArgumentNullException("projectId is a required property for Collection and cannot be null");
            }
            this.ProjectId = projectId;
            this.CreatedOn = createdOn;
            this.ModifiedOn = modifiedOn;
            this.CreatedBy = createdBy;
            this.ModifiedBy = modifiedBy;
        }

        /// <summary>
        /// The unique identifier for the collection entity.
        /// </summary>
        /// <value>The unique identifier for the collection entity.</value>
        /// <example>&quot;05450af0-4522-4e79-9acc-c1c09aae9152&quot;</example>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier that can be provided by game studio.
        /// </summary>
        /// <value>The unique identifier that can be provided by game studio.</value>
        /// <example>&quot;0f4c0af0452&quot;</example>
        [DataMember(Name = "unique_id", IsRequired = true, EmitDefaultValue = true)]
        public string UniqueId { get; set; }

        /// <summary>
        /// The name of the collection.
        /// </summary>
        /// <value>The name of the collection.</value>
        /// <example>&quot;Weapons&quot;</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// A brief description of the collection.
        /// </summary>
        /// <value>A brief description of the collection.</value>
        /// <example>&quot;This is collection of assault rifles&quot;</example>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// An image representing the collection&#39;s logo.
        /// </summary>
        /// <value>An image representing the collection&#39;s logo.</value>
        /// <example>&quot;https://example.com/logo.png&quot;</example>
        [DataMember(Name = "logo_image", IsRequired = true, EmitDefaultValue = true)]
        public string LogoImage { get; set; }

        /// <summary>
        /// Additional images associated with the collection, such as screenshots or promotional images.
        /// </summary>
        /// <value>Additional images associated with the collection, such as screenshots or promotional images.</value>
        [DataMember(Name = "medias", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Medias { get; set; }

        /// <summary>
        /// The main or featured image associated with the game. You can set it from the dashboard as main image.
        /// </summary>
        /// <value>The main or featured image associated with the game. You can set it from the dashboard as main image.</value>
        /// <example>&quot;https://example.com/main_media.png&quot;</example>
        [DataMember(Name = "main_media", IsRequired = true, EmitDefaultValue = true)]
        public string MainMedia { get; set; }

        /// <summary>
        /// A unique URL for the collection on the L3vels platform.
        /// </summary>
        /// <value>A unique URL for the collection on the L3vels platform.</value>
        /// <example>&quot;https://l3vels.xyz/collections/crypto-of-arms&quot;</example>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// A URL link to the collection&#39;s webpage.
        /// </summary>
        /// <value>A URL link to the collection&#39;s webpage.</value>
        /// <example>&quot;https://gamefi.org/games/mobox&quot;</example>
        [DataMember(Name = "web_link", IsRequired = true, EmitDefaultValue = true)]
        public string WebLink { get; set; }

        /// <summary>
        /// The supply represents the number of assets that are available within the Collection.
        /// </summary>
        /// <value>The supply represents the number of assets that are available within the Collection.</value>
        /// <example>1000</example>
        [DataMember(Name = "supply", IsRequired = true, EmitDefaultValue = true)]
        public decimal Supply { get; set; }

        /// <summary>
        /// Custom properties that are unique to the collection and defined by the developer to categorize and filter them.
        /// </summary>
        /// <value>Custom properties that are unique to the collection and defined by the developer to categorize and filter them.</value>
        [DataMember(Name = "custom_property_props", IsRequired = true, EmitDefaultValue = true)]
        public Object CustomPropertyProps { get; set; }

        /// <summary>
        /// Additional social links associated with the collection
        /// </summary>
        /// <value>Additional social links associated with the collection</value>
        [DataMember(Name = "social_links", IsRequired = true, EmitDefaultValue = true)]
        public List<string> SocialLinks { get; set; }

        /// <summary>
        /// Custom assets fields associated with the collection.
        /// </summary>
        /// <value>Custom assets fields associated with the collection.</value>
        [DataMember(Name = "custom_asset_props", IsRequired = true, EmitDefaultValue = true)]
        public Object CustomAssetProps { get; set; }

        /// <summary>
        /// The category or categories that the collection belongs to.
        /// </summary>
        /// <value>The category or categories that the collection belongs to.</value>
        [DataMember(Name = "categories", IsRequired = true, EmitDefaultValue = true)]
        public Object Categories { get; set; }

        /// <summary>
        /// The current status of the collection. Possible values are: Draft, Active
        /// </summary>
        /// <value>The current status of the collection. Possible values are: Draft, Active</value>
        /// <example>&quot;Draft&quot;</example>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// The unique identifier of the account that the Collection belongs to.
        /// </summary>
        /// <value>The unique identifier of the account that the Collection belongs to.</value>
        [DataMember(Name = "account_id", IsRequired = true, EmitDefaultValue = true)]
        public decimal AccountId { get; set; }

        /// <summary>
        /// The unique identifier of the project that the collection is associated with. This allows developers to organize their collections by project and helps with tracking and reporting.
        /// </summary>
        /// <value>The unique identifier of the project that the collection is associated with. This allows developers to organize their collections by project and helps with tracking and reporting.</value>
        /// <example>&quot;fd1895eb-6301-4107-a248-c3f2ae5bcaad&quot;</example>
        [DataMember(Name = "project_id", IsRequired = true, EmitDefaultValue = true)]
        public string ProjectId { get; set; }

        /// <summary>
        /// The date when the collection was created.
        /// </summary>
        /// <value>The date when the collection was created.</value>
        [DataMember(Name = "created_on", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset CreatedOn { get; set; }

        /// <summary>
        /// The date when the collection was last modified.
        /// </summary>
        /// <value>The date when the collection was last modified.</value>
        [DataMember(Name = "modified_on", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset ModifiedOn { get; set; }

        /// <summary>
        /// The Id of the user who created the collection.
        /// </summary>
        /// <value>The Id of the user who created the collection.</value>
        [DataMember(Name = "created_by", IsRequired = true, EmitDefaultValue = true)]
        public decimal CreatedBy { get; set; }

        /// <summary>
        /// The Id of the user who last modified the collection.
        /// </summary>
        /// <value>The Id of the user who last modified the collection.</value>
        [DataMember(Name = "modified_by", IsRequired = true, EmitDefaultValue = true)]
        public decimal ModifiedBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Collection {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UniqueId: ").Append(UniqueId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LogoImage: ").Append(LogoImage).Append("\n");
            sb.Append("  Medias: ").Append(Medias).Append("\n");
            sb.Append("  MainMedia: ").Append(MainMedia).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  WebLink: ").Append(WebLink).Append("\n");
            sb.Append("  Supply: ").Append(Supply).Append("\n");
            sb.Append("  CustomPropertyProps: ").Append(CustomPropertyProps).Append("\n");
            sb.Append("  SocialLinks: ").Append(SocialLinks).Append("\n");
            sb.Append("  CustomAssetProps: ").Append(CustomAssetProps).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  ModifiedBy: ").Append(ModifiedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Collection);
        }

        /// <summary>
        /// Returns true if Collection instances are equal
        /// </summary>
        /// <param name="input">Instance of Collection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Collection input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UniqueId == input.UniqueId ||
                    (this.UniqueId != null &&
                    this.UniqueId.Equals(input.UniqueId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.LogoImage == input.LogoImage ||
                    (this.LogoImage != null &&
                    this.LogoImage.Equals(input.LogoImage))
                ) && 
                (
                    this.Medias == input.Medias ||
                    this.Medias != null &&
                    input.Medias != null &&
                    this.Medias.SequenceEqual(input.Medias)
                ) && 
                (
                    this.MainMedia == input.MainMedia ||
                    (this.MainMedia != null &&
                    this.MainMedia.Equals(input.MainMedia))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.WebLink == input.WebLink ||
                    (this.WebLink != null &&
                    this.WebLink.Equals(input.WebLink))
                ) && 
                (
                    this.Supply == input.Supply ||
                    this.Supply.Equals(input.Supply)
                ) && 
                (
                    this.CustomPropertyProps == input.CustomPropertyProps ||
                    (this.CustomPropertyProps != null &&
                    this.CustomPropertyProps.Equals(input.CustomPropertyProps))
                ) && 
                (
                    this.SocialLinks == input.SocialLinks ||
                    this.SocialLinks != null &&
                    input.SocialLinks != null &&
                    this.SocialLinks.SequenceEqual(input.SocialLinks)
                ) && 
                (
                    this.CustomAssetProps == input.CustomAssetProps ||
                    (this.CustomAssetProps != null &&
                    this.CustomAssetProps.Equals(input.CustomAssetProps))
                ) && 
                (
                    this.Categories == input.Categories ||
                    (this.Categories != null &&
                    this.Categories.Equals(input.Categories))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    this.AccountId.Equals(input.AccountId)
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.ModifiedOn == input.ModifiedOn ||
                    (this.ModifiedOn != null &&
                    this.ModifiedOn.Equals(input.ModifiedOn))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    this.CreatedBy.Equals(input.CreatedBy)
                ) && 
                (
                    this.ModifiedBy == input.ModifiedBy ||
                    this.ModifiedBy.Equals(input.ModifiedBy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.UniqueId != null)
                {
                    hashCode = (hashCode * 59) + this.UniqueId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.LogoImage != null)
                {
                    hashCode = (hashCode * 59) + this.LogoImage.GetHashCode();
                }
                if (this.Medias != null)
                {
                    hashCode = (hashCode * 59) + this.Medias.GetHashCode();
                }
                if (this.MainMedia != null)
                {
                    hashCode = (hashCode * 59) + this.MainMedia.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.WebLink != null)
                {
                    hashCode = (hashCode * 59) + this.WebLink.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Supply.GetHashCode();
                if (this.CustomPropertyProps != null)
                {
                    hashCode = (hashCode * 59) + this.CustomPropertyProps.GetHashCode();
                }
                if (this.SocialLinks != null)
                {
                    hashCode = (hashCode * 59) + this.SocialLinks.GetHashCode();
                }
                if (this.CustomAssetProps != null)
                {
                    hashCode = (hashCode * 59) + this.CustomAssetProps.GetHashCode();
                }
                if (this.Categories != null)
                {
                    hashCode = (hashCode * 59) + this.Categories.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                if (this.ProjectId != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectId.GetHashCode();
                }
                if (this.CreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOn.GetHashCode();
                }
                if (this.ModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedOn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                hashCode = (hashCode * 59) + this.ModifiedBy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
