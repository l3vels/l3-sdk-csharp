/*
 * L3vels Api
 *
 * L3vels API for Game developers
 *
 * The version of the OpenAPI document: 0.3
 * Contact: support@l3vels.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = L3vels.Sdk.Client.OpenAPIDateConverter;

namespace L3vels.Sdk.Model
{
    /// <summary>
    /// Asset to mint. You need to provide token ID or asset ID and amount to mint
    /// </summary>
    [DataContract(Name = "MintDto_asset")]
    public partial class MintDtoAsset : IEquatable<MintDtoAsset>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MintDtoAsset" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MintDtoAsset() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MintDtoAsset" /> class.
        /// </summary>
        /// <param name="tokenId">Token ID to mint. You can provide this or asset_id.</param>
        /// <param name="assetId">Asset ID to mint. You can provide this or token_id.</param>
        /// <param name="amount">Amount to mint (required).</param>
        public MintDtoAsset(decimal tokenId = default(decimal), string assetId = default(string), decimal amount = default(decimal))
        {
            this.Amount = amount;
            this.TokenId = tokenId;
            this.AssetId = assetId;
        }

        /// <summary>
        /// Token ID to mint. You can provide this or asset_id
        /// </summary>
        /// <value>Token ID to mint. You can provide this or asset_id</value>
        /// <example>1</example>
        [DataMember(Name = "token_id", EmitDefaultValue = false)]
        public decimal TokenId { get; set; }

        /// <summary>
        /// Asset ID to mint. You can provide this or token_id
        /// </summary>
        /// <value>Asset ID to mint. You can provide this or token_id</value>
        /// <example>&quot;a44b646a-ae14-4e05-ae09-b12d5e7269bf&quot;</example>
        [DataMember(Name = "asset_id", EmitDefaultValue = false)]
        public string AssetId { get; set; }

        /// <summary>
        /// Amount to mint
        /// </summary>
        /// <value>Amount to mint</value>
        /// <example>1</example>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public decimal Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MintDtoAsset {\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MintDtoAsset);
        }

        /// <summary>
        /// Returns true if MintDtoAsset instances are equal
        /// </summary>
        /// <param name="input">Instance of MintDtoAsset to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MintDtoAsset input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TokenId == input.TokenId ||
                    this.TokenId.Equals(input.TokenId)
                ) && 
                (
                    this.AssetId == input.AssetId ||
                    (this.AssetId != null &&
                    this.AssetId.Equals(input.AssetId))
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TokenId.GetHashCode();
                if (this.AssetId != null)
                {
                    hashCode = (hashCode * 59) + this.AssetId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
