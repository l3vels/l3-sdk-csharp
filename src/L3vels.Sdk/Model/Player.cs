/*
 * L3vels Api
 *
 * L3vels API for Game developers
 *
 * The version of the OpenAPI document: 0.3
 * Contact: support@l3vels.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = L3vels.Sdk.Client.OpenAPIDateConverter;

namespace L3vels.Sdk.Model
{
    /// <summary>
    /// Player
    /// </summary>
    [DataContract(Name = "Player")]
    public partial class Player : IEquatable<Player>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Player" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Player() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Player" /> class.
        /// </summary>
        /// <param name="id">The unique identifier for the Player entity. (required).</param>
        /// <param name="uniqueId">The unique ID of the Player that can be provided by customers or generated by us. (required).</param>
        /// <param name="name">The name of the player (required).</param>
        /// <param name="username">Username of the player (required).</param>
        /// <param name="email">Email of the player (required).</param>
        /// <param name="avatar">Avatar URL of the player (required).</param>
        /// <param name="customProps">Custom props for player (required).</param>
        /// <param name="lastSeen">The date when player was active last time (required).</param>
        /// <param name="accountId">The unique identifier of the account that the Player belongs to. (required).</param>
        /// <param name="projectId">The unique identifier of the project that the Player is associated with. This allows developers to organize their players by project and helps with tracking and reporting. Example: Player Jack is associated with project Fortnite. (required).</param>
        /// <param name="createdOn">The date when the player was created. (required).</param>
        /// <param name="modifiedOn">The date when the player was last modified. (required).</param>
        /// <param name="createdBy">The Id of the user who created the player. (required).</param>
        /// <param name="modifiedBy">The Id of the user who last modified the player. (required).</param>
        /// <param name="isCreateWallet">Boolean value indicating whether the player has wallet or not (required).</param>
        public Player(string id = default(string), string uniqueId = default(string), string name = default(string), string username = default(string), string email = default(string), string avatar = default(string), Object customProps = default(Object), DateTimeOffset lastSeen = default(DateTimeOffset), decimal accountId = default(decimal), string projectId = default(string), DateTimeOffset createdOn = default(DateTimeOffset), DateTimeOffset modifiedOn = default(DateTimeOffset), decimal createdBy = default(decimal), decimal modifiedBy = default(decimal), bool isCreateWallet = default(bool))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Player and cannot be null");
            }
            this.Id = id;
            // to ensure "uniqueId" is required (not null)
            if (uniqueId == null)
            {
                throw new ArgumentNullException("uniqueId is a required property for Player and cannot be null");
            }
            this.UniqueId = uniqueId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Player and cannot be null");
            }
            this.Name = name;
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new ArgumentNullException("username is a required property for Player and cannot be null");
            }
            this.Username = username;
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for Player and cannot be null");
            }
            this.Email = email;
            // to ensure "avatar" is required (not null)
            if (avatar == null)
            {
                throw new ArgumentNullException("avatar is a required property for Player and cannot be null");
            }
            this.Avatar = avatar;
            // to ensure "customProps" is required (not null)
            if (customProps == null)
            {
                throw new ArgumentNullException("customProps is a required property for Player and cannot be null");
            }
            this.CustomProps = customProps;
            this.LastSeen = lastSeen;
            this.AccountId = accountId;
            // to ensure "projectId" is required (not null)
            if (projectId == null)
            {
                throw new ArgumentNullException("projectId is a required property for Player and cannot be null");
            }
            this.ProjectId = projectId;
            this.CreatedOn = createdOn;
            this.ModifiedOn = modifiedOn;
            this.CreatedBy = createdBy;
            this.ModifiedBy = modifiedBy;
            this.IsCreateWallet = isCreateWallet;
        }

        /// <summary>
        /// The unique identifier for the Player entity.
        /// </summary>
        /// <value>The unique identifier for the Player entity.</value>
        /// <example>&quot;353c69f6-76a6-4baa-b68b-852c1c531953&quot;</example>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The unique ID of the Player that can be provided by customers or generated by us.
        /// </summary>
        /// <value>The unique ID of the Player that can be provided by customers or generated by us.</value>
        /// <example>&quot;f811b994a31&quot;</example>
        [DataMember(Name = "unique_id", IsRequired = true, EmitDefaultValue = true)]
        public string UniqueId { get; set; }

        /// <summary>
        /// The name of the player
        /// </summary>
        /// <value>The name of the player</value>
        /// <example>&quot;Jack Coon&quot;</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Username of the player
        /// </summary>
        /// <value>Username of the player</value>
        /// <example>&quot;jackcoon&quot;</example>
        [DataMember(Name = "username", IsRequired = true, EmitDefaultValue = true)]
        public string Username { get; set; }

        /// <summary>
        /// Email of the player
        /// </summary>
        /// <value>Email of the player</value>
        /// <example>&quot;jack@coon.com&quot;</example>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Avatar URL of the player
        /// </summary>
        /// <value>Avatar URL of the player</value>
        /// <example>&quot;https://example.com/avatar.png&quot;</example>
        [DataMember(Name = "avatar", IsRequired = true, EmitDefaultValue = true)]
        public string Avatar { get; set; }

        /// <summary>
        /// Custom props for player
        /// </summary>
        /// <value>Custom props for player</value>
        [DataMember(Name = "custom_props", IsRequired = true, EmitDefaultValue = true)]
        public Object CustomProps { get; set; }

        /// <summary>
        /// The date when player was active last time
        /// </summary>
        /// <value>The date when player was active last time</value>
        [DataMember(Name = "last_seen", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset LastSeen { get; set; }

        /// <summary>
        /// The unique identifier of the account that the Player belongs to.
        /// </summary>
        /// <value>The unique identifier of the account that the Player belongs to.</value>
        [DataMember(Name = "account_id", IsRequired = true, EmitDefaultValue = true)]
        public decimal AccountId { get; set; }

        /// <summary>
        /// The unique identifier of the project that the Player is associated with. This allows developers to organize their players by project and helps with tracking and reporting. Example: Player Jack is associated with project Fortnite.
        /// </summary>
        /// <value>The unique identifier of the project that the Player is associated with. This allows developers to organize their players by project and helps with tracking and reporting. Example: Player Jack is associated with project Fortnite.</value>
        /// <example>&quot;fd1895eb-6301-4107-a248-c3f2ae5bcaad&quot;</example>
        [DataMember(Name = "project_id", IsRequired = true, EmitDefaultValue = true)]
        public string ProjectId { get; set; }

        /// <summary>
        /// The date when the player was created.
        /// </summary>
        /// <value>The date when the player was created.</value>
        [DataMember(Name = "created_on", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset CreatedOn { get; set; }

        /// <summary>
        /// The date when the player was last modified.
        /// </summary>
        /// <value>The date when the player was last modified.</value>
        [DataMember(Name = "modified_on", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset ModifiedOn { get; set; }

        /// <summary>
        /// The Id of the user who created the player.
        /// </summary>
        /// <value>The Id of the user who created the player.</value>
        [DataMember(Name = "created_by", IsRequired = true, EmitDefaultValue = true)]
        public decimal CreatedBy { get; set; }

        /// <summary>
        /// The Id of the user who last modified the player.
        /// </summary>
        /// <value>The Id of the user who last modified the player.</value>
        [DataMember(Name = "modified_by", IsRequired = true, EmitDefaultValue = true)]
        public decimal ModifiedBy { get; set; }

        /// <summary>
        /// Boolean value indicating whether the player has wallet or not
        /// </summary>
        /// <value>Boolean value indicating whether the player has wallet or not</value>
        /// <example>true</example>
        [DataMember(Name = "is_create_wallet", IsRequired = true, EmitDefaultValue = true)]
        public bool IsCreateWallet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Player {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UniqueId: ").Append(UniqueId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  CustomProps: ").Append(CustomProps).Append("\n");
            sb.Append("  LastSeen: ").Append(LastSeen).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  ModifiedBy: ").Append(ModifiedBy).Append("\n");
            sb.Append("  IsCreateWallet: ").Append(IsCreateWallet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Player);
        }

        /// <summary>
        /// Returns true if Player instances are equal
        /// </summary>
        /// <param name="input">Instance of Player to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Player input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UniqueId == input.UniqueId ||
                    (this.UniqueId != null &&
                    this.UniqueId.Equals(input.UniqueId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Avatar == input.Avatar ||
                    (this.Avatar != null &&
                    this.Avatar.Equals(input.Avatar))
                ) && 
                (
                    this.CustomProps == input.CustomProps ||
                    (this.CustomProps != null &&
                    this.CustomProps.Equals(input.CustomProps))
                ) && 
                (
                    this.LastSeen == input.LastSeen ||
                    (this.LastSeen != null &&
                    this.LastSeen.Equals(input.LastSeen))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    this.AccountId.Equals(input.AccountId)
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.ModifiedOn == input.ModifiedOn ||
                    (this.ModifiedOn != null &&
                    this.ModifiedOn.Equals(input.ModifiedOn))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    this.CreatedBy.Equals(input.CreatedBy)
                ) && 
                (
                    this.ModifiedBy == input.ModifiedBy ||
                    this.ModifiedBy.Equals(input.ModifiedBy)
                ) && 
                (
                    this.IsCreateWallet == input.IsCreateWallet ||
                    this.IsCreateWallet.Equals(input.IsCreateWallet)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.UniqueId != null)
                {
                    hashCode = (hashCode * 59) + this.UniqueId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.Avatar != null)
                {
                    hashCode = (hashCode * 59) + this.Avatar.GetHashCode();
                }
                if (this.CustomProps != null)
                {
                    hashCode = (hashCode * 59) + this.CustomProps.GetHashCode();
                }
                if (this.LastSeen != null)
                {
                    hashCode = (hashCode * 59) + this.LastSeen.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                if (this.ProjectId != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectId.GetHashCode();
                }
                if (this.CreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOn.GetHashCode();
                }
                if (this.ModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedOn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                hashCode = (hashCode * 59) + this.ModifiedBy.GetHashCode();
                hashCode = (hashCode * 59) + this.IsCreateWallet.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
