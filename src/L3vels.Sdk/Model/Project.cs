/*
 * L3vels Api
 *
 * L3vels API for Game developers
 *
 * The version of the OpenAPI document: 0.3
 * Contact: support@l3vels.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = L3vels.Sdk.Client.OpenAPIDateConverter;

namespace L3vels.Sdk.Model
{
    /// <summary>
    /// Project
    /// </summary>
    [DataContract(Name = "Project")]
    public partial class Project : IEquatable<Project>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Project" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Project() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Project" /> class.
        /// </summary>
        /// <param name="id">The unique identifier for the Game entity. (required).</param>
        /// <param name="name">The name of the Game. (required).</param>
        /// <param name="description">A brief description of the Game. (required).</param>
        /// <param name="category">The category or genre of the Game. (required).</param>
        /// <param name="logoImage">The logo or icon associated with the Game. (required).</param>
        /// <param name="medias">Additional images associated with the collection, such as screenshots or promotional images. (required).</param>
        /// <param name="socialLinks">Additional social links associated with the collection (required).</param>
        /// <param name="mainMedia">The main or featured image associated with the Game. You can set it from the Dashboard as main image. (required).</param>
        /// <param name="url">A unique URL for the game on the L3vels platform. (required).</param>
        /// <param name="webLink">The URL for the Game&#39;s website or landing page. (required).</param>
        /// <param name="discord">The link to the Game&#39;s Discord server. (required).</param>
        /// <param name="twitter">The link to the Game&#39;s official Twitter account. (required).</param>
        /// <param name="instagram">The link to the Game&#39;s official Instagram account. (required).</param>
        /// <param name="contactPhone"> A phone number for contacting the Game&#39;s developers or support team. (required).</param>
        /// <param name="contactEmail">An email address for contacting the Game&#39;s developers or support team. (required).</param>
        /// <param name="status">The current status of the Game, such as \&quot;Draft\&quot;, \&quot;Active\&quot;, or \&quot;Inactive\&quot;. (required).</param>
        /// <param name="accountId"> The unique identifier of the account that the Game belongs to. This allows developers to manage multiple Games across multiple accounts. (required).</param>
        /// <param name="createdOn">The date and time that the Game entity was created. (required).</param>
        /// <param name="modifiedOn">The date and time that the Game entity was last modified. (required).</param>
        /// <param name="createdBy">The user or system that created the Game entity. (required).</param>
        /// <param name="modifiedBy">The user or system that last modified the Game entity. (required).</param>
        public Project(string id = default(string), string name = default(string), string description = default(string), string category = default(string), string logoImage = default(string), List<string> medias = default(List<string>), List<string> socialLinks = default(List<string>), string mainMedia = default(string), string url = default(string), string webLink = default(string), string discord = default(string), string twitter = default(string), string instagram = default(string), string contactPhone = default(string), string contactEmail = default(string), string status = default(string), decimal accountId = default(decimal), DateTimeOffset createdOn = default(DateTimeOffset), DateTimeOffset modifiedOn = default(DateTimeOffset), decimal createdBy = default(decimal), decimal modifiedBy = default(decimal))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Project and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Project and cannot be null");
            }
            this.Name = name;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for Project and cannot be null");
            }
            this.Description = description;
            // to ensure "category" is required (not null)
            if (category == null)
            {
                throw new ArgumentNullException("category is a required property for Project and cannot be null");
            }
            this.Category = category;
            // to ensure "logoImage" is required (not null)
            if (logoImage == null)
            {
                throw new ArgumentNullException("logoImage is a required property for Project and cannot be null");
            }
            this.LogoImage = logoImage;
            // to ensure "medias" is required (not null)
            if (medias == null)
            {
                throw new ArgumentNullException("medias is a required property for Project and cannot be null");
            }
            this.Medias = medias;
            // to ensure "socialLinks" is required (not null)
            if (socialLinks == null)
            {
                throw new ArgumentNullException("socialLinks is a required property for Project and cannot be null");
            }
            this.SocialLinks = socialLinks;
            // to ensure "mainMedia" is required (not null)
            if (mainMedia == null)
            {
                throw new ArgumentNullException("mainMedia is a required property for Project and cannot be null");
            }
            this.MainMedia = mainMedia;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for Project and cannot be null");
            }
            this.Url = url;
            // to ensure "webLink" is required (not null)
            if (webLink == null)
            {
                throw new ArgumentNullException("webLink is a required property for Project and cannot be null");
            }
            this.WebLink = webLink;
            // to ensure "discord" is required (not null)
            if (discord == null)
            {
                throw new ArgumentNullException("discord is a required property for Project and cannot be null");
            }
            this.Discord = discord;
            // to ensure "twitter" is required (not null)
            if (twitter == null)
            {
                throw new ArgumentNullException("twitter is a required property for Project and cannot be null");
            }
            this.Twitter = twitter;
            // to ensure "instagram" is required (not null)
            if (instagram == null)
            {
                throw new ArgumentNullException("instagram is a required property for Project and cannot be null");
            }
            this.Instagram = instagram;
            // to ensure "contactPhone" is required (not null)
            if (contactPhone == null)
            {
                throw new ArgumentNullException("contactPhone is a required property for Project and cannot be null");
            }
            this.ContactPhone = contactPhone;
            // to ensure "contactEmail" is required (not null)
            if (contactEmail == null)
            {
                throw new ArgumentNullException("contactEmail is a required property for Project and cannot be null");
            }
            this.ContactEmail = contactEmail;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for Project and cannot be null");
            }
            this.Status = status;
            this.AccountId = accountId;
            this.CreatedOn = createdOn;
            this.ModifiedOn = modifiedOn;
            this.CreatedBy = createdBy;
            this.ModifiedBy = modifiedBy;
        }

        /// <summary>
        /// The unique identifier for the Game entity.
        /// </summary>
        /// <value>The unique identifier for the Game entity.</value>
        /// <example>&quot;&quot;</example>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the Game.
        /// </summary>
        /// <value>The name of the Game.</value>
        /// <example>&quot;&quot;</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// A brief description of the Game.
        /// </summary>
        /// <value>A brief description of the Game.</value>
        /// <example>&quot;&quot;</example>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The category or genre of the Game.
        /// </summary>
        /// <value>The category or genre of the Game.</value>
        /// <example>&quot;&quot;</example>
        [DataMember(Name = "category", IsRequired = true, EmitDefaultValue = true)]
        public string Category { get; set; }

        /// <summary>
        /// The logo or icon associated with the Game.
        /// </summary>
        /// <value>The logo or icon associated with the Game.</value>
        /// <example>&quot;&quot;</example>
        [DataMember(Name = "logo_image", IsRequired = true, EmitDefaultValue = true)]
        public string LogoImage { get; set; }

        /// <summary>
        /// Additional images associated with the collection, such as screenshots or promotional images.
        /// </summary>
        /// <value>Additional images associated with the collection, such as screenshots or promotional images.</value>
        [DataMember(Name = "medias", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Medias { get; set; }

        /// <summary>
        /// Additional social links associated with the collection
        /// </summary>
        /// <value>Additional social links associated with the collection</value>
        [DataMember(Name = "social_links", IsRequired = true, EmitDefaultValue = true)]
        public List<string> SocialLinks { get; set; }

        /// <summary>
        /// The main or featured image associated with the Game. You can set it from the Dashboard as main image.
        /// </summary>
        /// <value>The main or featured image associated with the Game. You can set it from the Dashboard as main image.</value>
        /// <example>&quot;&quot;</example>
        [DataMember(Name = "main_media", IsRequired = true, EmitDefaultValue = true)]
        public string MainMedia { get; set; }

        /// <summary>
        /// A unique URL for the game on the L3vels platform.
        /// </summary>
        /// <value>A unique URL for the game on the L3vels platform.</value>
        /// <example>&quot;&quot;</example>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// The URL for the Game&#39;s website or landing page.
        /// </summary>
        /// <value>The URL for the Game&#39;s website or landing page.</value>
        /// <example>&quot;&quot;</example>
        [DataMember(Name = "web_link", IsRequired = true, EmitDefaultValue = true)]
        public string WebLink { get; set; }

        /// <summary>
        /// The link to the Game&#39;s Discord server.
        /// </summary>
        /// <value>The link to the Game&#39;s Discord server.</value>
        /// <example>&quot;&quot;</example>
        [DataMember(Name = "discord", IsRequired = true, EmitDefaultValue = true)]
        public string Discord { get; set; }

        /// <summary>
        /// The link to the Game&#39;s official Twitter account.
        /// </summary>
        /// <value>The link to the Game&#39;s official Twitter account.</value>
        /// <example>&quot;&quot;</example>
        [DataMember(Name = "twitter", IsRequired = true, EmitDefaultValue = true)]
        public string Twitter { get; set; }

        /// <summary>
        /// The link to the Game&#39;s official Instagram account.
        /// </summary>
        /// <value>The link to the Game&#39;s official Instagram account.</value>
        /// <example>&quot;&quot;</example>
        [DataMember(Name = "instagram", IsRequired = true, EmitDefaultValue = true)]
        public string Instagram { get; set; }

        /// <summary>
        ///  A phone number for contacting the Game&#39;s developers or support team.
        /// </summary>
        /// <value> A phone number for contacting the Game&#39;s developers or support team.</value>
        /// <example>&quot;&quot;</example>
        [DataMember(Name = "contact_phone", IsRequired = true, EmitDefaultValue = true)]
        public string ContactPhone { get; set; }

        /// <summary>
        /// An email address for contacting the Game&#39;s developers or support team.
        /// </summary>
        /// <value>An email address for contacting the Game&#39;s developers or support team.</value>
        /// <example>&quot;&quot;</example>
        [DataMember(Name = "contact_email", IsRequired = true, EmitDefaultValue = true)]
        public string ContactEmail { get; set; }

        /// <summary>
        /// The current status of the Game, such as \&quot;Draft\&quot;, \&quot;Active\&quot;, or \&quot;Inactive\&quot;.
        /// </summary>
        /// <value>The current status of the Game, such as \&quot;Draft\&quot;, \&quot;Active\&quot;, or \&quot;Inactive\&quot;.</value>
        /// <example>&quot;&quot;</example>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        ///  The unique identifier of the account that the Game belongs to. This allows developers to manage multiple Games across multiple accounts.
        /// </summary>
        /// <value> The unique identifier of the account that the Game belongs to. This allows developers to manage multiple Games across multiple accounts.</value>
        [DataMember(Name = "account_id", IsRequired = true, EmitDefaultValue = true)]
        public decimal AccountId { get; set; }

        /// <summary>
        /// The date and time that the Game entity was created.
        /// </summary>
        /// <value>The date and time that the Game entity was created.</value>
        [DataMember(Name = "created_on", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset CreatedOn { get; set; }

        /// <summary>
        /// The date and time that the Game entity was last modified.
        /// </summary>
        /// <value>The date and time that the Game entity was last modified.</value>
        [DataMember(Name = "modified_on", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset ModifiedOn { get; set; }

        /// <summary>
        /// The user or system that created the Game entity.
        /// </summary>
        /// <value>The user or system that created the Game entity.</value>
        [DataMember(Name = "created_by", IsRequired = true, EmitDefaultValue = true)]
        public decimal CreatedBy { get; set; }

        /// <summary>
        /// The user or system that last modified the Game entity.
        /// </summary>
        /// <value>The user or system that last modified the Game entity.</value>
        [DataMember(Name = "modified_by", IsRequired = true, EmitDefaultValue = true)]
        public decimal ModifiedBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Project {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  LogoImage: ").Append(LogoImage).Append("\n");
            sb.Append("  Medias: ").Append(Medias).Append("\n");
            sb.Append("  SocialLinks: ").Append(SocialLinks).Append("\n");
            sb.Append("  MainMedia: ").Append(MainMedia).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  WebLink: ").Append(WebLink).Append("\n");
            sb.Append("  Discord: ").Append(Discord).Append("\n");
            sb.Append("  Twitter: ").Append(Twitter).Append("\n");
            sb.Append("  Instagram: ").Append(Instagram).Append("\n");
            sb.Append("  ContactPhone: ").Append(ContactPhone).Append("\n");
            sb.Append("  ContactEmail: ").Append(ContactEmail).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  ModifiedBy: ").Append(ModifiedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Project);
        }

        /// <summary>
        /// Returns true if Project instances are equal
        /// </summary>
        /// <param name="input">Instance of Project to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Project input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.LogoImage == input.LogoImage ||
                    (this.LogoImage != null &&
                    this.LogoImage.Equals(input.LogoImage))
                ) && 
                (
                    this.Medias == input.Medias ||
                    this.Medias != null &&
                    input.Medias != null &&
                    this.Medias.SequenceEqual(input.Medias)
                ) && 
                (
                    this.SocialLinks == input.SocialLinks ||
                    this.SocialLinks != null &&
                    input.SocialLinks != null &&
                    this.SocialLinks.SequenceEqual(input.SocialLinks)
                ) && 
                (
                    this.MainMedia == input.MainMedia ||
                    (this.MainMedia != null &&
                    this.MainMedia.Equals(input.MainMedia))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.WebLink == input.WebLink ||
                    (this.WebLink != null &&
                    this.WebLink.Equals(input.WebLink))
                ) && 
                (
                    this.Discord == input.Discord ||
                    (this.Discord != null &&
                    this.Discord.Equals(input.Discord))
                ) && 
                (
                    this.Twitter == input.Twitter ||
                    (this.Twitter != null &&
                    this.Twitter.Equals(input.Twitter))
                ) && 
                (
                    this.Instagram == input.Instagram ||
                    (this.Instagram != null &&
                    this.Instagram.Equals(input.Instagram))
                ) && 
                (
                    this.ContactPhone == input.ContactPhone ||
                    (this.ContactPhone != null &&
                    this.ContactPhone.Equals(input.ContactPhone))
                ) && 
                (
                    this.ContactEmail == input.ContactEmail ||
                    (this.ContactEmail != null &&
                    this.ContactEmail.Equals(input.ContactEmail))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    this.AccountId.Equals(input.AccountId)
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.ModifiedOn == input.ModifiedOn ||
                    (this.ModifiedOn != null &&
                    this.ModifiedOn.Equals(input.ModifiedOn))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    this.CreatedBy.Equals(input.CreatedBy)
                ) && 
                (
                    this.ModifiedBy == input.ModifiedBy ||
                    this.ModifiedBy.Equals(input.ModifiedBy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                if (this.LogoImage != null)
                {
                    hashCode = (hashCode * 59) + this.LogoImage.GetHashCode();
                }
                if (this.Medias != null)
                {
                    hashCode = (hashCode * 59) + this.Medias.GetHashCode();
                }
                if (this.SocialLinks != null)
                {
                    hashCode = (hashCode * 59) + this.SocialLinks.GetHashCode();
                }
                if (this.MainMedia != null)
                {
                    hashCode = (hashCode * 59) + this.MainMedia.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.WebLink != null)
                {
                    hashCode = (hashCode * 59) + this.WebLink.GetHashCode();
                }
                if (this.Discord != null)
                {
                    hashCode = (hashCode * 59) + this.Discord.GetHashCode();
                }
                if (this.Twitter != null)
                {
                    hashCode = (hashCode * 59) + this.Twitter.GetHashCode();
                }
                if (this.Instagram != null)
                {
                    hashCode = (hashCode * 59) + this.Instagram.GetHashCode();
                }
                if (this.ContactPhone != null)
                {
                    hashCode = (hashCode * 59) + this.ContactPhone.GetHashCode();
                }
                if (this.ContactEmail != null)
                {
                    hashCode = (hashCode * 59) + this.ContactEmail.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                if (this.CreatedOn != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOn.GetHashCode();
                }
                if (this.ModifiedOn != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedOn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                hashCode = (hashCode * 59) + this.ModifiedBy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
