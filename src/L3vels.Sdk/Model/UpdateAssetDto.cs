/*
 * L3vels Api
 *
 * L3vels API for Game developers
 *
 * The version of the OpenAPI document: 0.3
 * Contact: support@l3vels.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = L3vels.Sdk.Client.OpenAPIDateConverter;

namespace L3vels.Sdk.Model
{
    /// <summary>
    /// UpdateAssetDto
    /// </summary>
    [DataContract(Name = "UpdateAssetDto")]
    public partial class UpdateAssetDto : IEquatable<UpdateAssetDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateAssetDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateAssetDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateAssetDto" /> class.
        /// </summary>
        /// <param name="name">The name of the asset..</param>
        /// <param name="description">The story of asset..</param>
        /// <param name="price">Price of asset.</param>
        /// <param name="supply">Supply of asset.</param>
        /// <param name="assetUrl">Asset URL.</param>
        /// <param name="customProps">Custom props for asset..</param>
        /// <param name="collectionId">Collection ID to find and update the asset in. Example: Update AK-47 asset in Weapons collection. (required).</param>
        /// <param name="projectId">Game/project ID to update the asset in. Example: Call of Duty (required).</param>
        public UpdateAssetDto(string name = default(string), string description = default(string), decimal price = default(decimal), decimal supply = default(decimal), string assetUrl = default(string), Object customProps = default(Object), string collectionId = default(string), string projectId = default(string))
        {
            // to ensure "collectionId" is required (not null)
            if (collectionId == null)
            {
                throw new ArgumentNullException("collectionId is a required property for UpdateAssetDto and cannot be null");
            }
            this.CollectionId = collectionId;
            // to ensure "projectId" is required (not null)
            if (projectId == null)
            {
                throw new ArgumentNullException("projectId is a required property for UpdateAssetDto and cannot be null");
            }
            this.ProjectId = projectId;
            this.Name = name;
            this.Description = description;
            this.Price = price;
            this.Supply = supply;
            this.AssetUrl = assetUrl;
            this.CustomProps = customProps;
        }

        /// <summary>
        /// The name of the asset.
        /// </summary>
        /// <value>The name of the asset.</value>
        /// <example>&quot;AK-47&quot;</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The story of asset.
        /// </summary>
        /// <value>The story of asset.</value>
        /// <example>&quot;Assault rifle operated by gas pressure. Developed in the Soviet Union.&quot;</example>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Price of asset
        /// </summary>
        /// <value>Price of asset</value>
        /// <example>10</example>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public decimal Price { get; set; }

        /// <summary>
        /// Supply of asset
        /// </summary>
        /// <value>Supply of asset</value>
        /// <example>10</example>
        [DataMember(Name = "supply", EmitDefaultValue = false)]
        public decimal Supply { get; set; }

        /// <summary>
        /// Asset URL
        /// </summary>
        /// <value>Asset URL</value>
        /// <example>&quot;https://example.com/ak47.png&quot;</example>
        [DataMember(Name = "asset_url", EmitDefaultValue = false)]
        public string AssetUrl { get; set; }

        /// <summary>
        /// Custom props for asset.
        /// </summary>
        /// <value>Custom props for asset.</value>
        [DataMember(Name = "custom_props", EmitDefaultValue = false)]
        public Object CustomProps { get; set; }

        /// <summary>
        /// Collection ID to find and update the asset in. Example: Update AK-47 asset in Weapons collection.
        /// </summary>
        /// <value>Collection ID to find and update the asset in. Example: Update AK-47 asset in Weapons collection.</value>
        /// <example>&quot;353c69f6-76a6-4baa-b68b-852c1c531953&quot;</example>
        [DataMember(Name = "collection_id", IsRequired = true, EmitDefaultValue = true)]
        public string CollectionId { get; set; }

        /// <summary>
        /// Game/project ID to update the asset in. Example: Call of Duty
        /// </summary>
        /// <value>Game/project ID to update the asset in. Example: Call of Duty</value>
        /// <example>&quot;353c69f6-76a6-4baa-b68b-852c1c531953&quot;</example>
        [DataMember(Name = "project_id", IsRequired = true, EmitDefaultValue = true)]
        public string ProjectId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateAssetDto {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Supply: ").Append(Supply).Append("\n");
            sb.Append("  AssetUrl: ").Append(AssetUrl).Append("\n");
            sb.Append("  CustomProps: ").Append(CustomProps).Append("\n");
            sb.Append("  CollectionId: ").Append(CollectionId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateAssetDto);
        }

        /// <summary>
        /// Returns true if UpdateAssetDto instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateAssetDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateAssetDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.Supply == input.Supply ||
                    this.Supply.Equals(input.Supply)
                ) && 
                (
                    this.AssetUrl == input.AssetUrl ||
                    (this.AssetUrl != null &&
                    this.AssetUrl.Equals(input.AssetUrl))
                ) && 
                (
                    this.CustomProps == input.CustomProps ||
                    (this.CustomProps != null &&
                    this.CustomProps.Equals(input.CustomProps))
                ) && 
                (
                    this.CollectionId == input.CollectionId ||
                    (this.CollectionId != null &&
                    this.CollectionId.Equals(input.CollectionId))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Price.GetHashCode();
                hashCode = (hashCode * 59) + this.Supply.GetHashCode();
                if (this.AssetUrl != null)
                {
                    hashCode = (hashCode * 59) + this.AssetUrl.GetHashCode();
                }
                if (this.CustomProps != null)
                {
                    hashCode = (hashCode * 59) + this.CustomProps.GetHashCode();
                }
                if (this.CollectionId != null)
                {
                    hashCode = (hashCode * 59) + this.CollectionId.GetHashCode();
                }
                if (this.ProjectId != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
